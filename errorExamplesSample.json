[{
  "code": "const res = await drive.files.export({\n  fileId: 'asxKJod9s79', // A Google Doc\n  mimeType: 'application/pdf'\n}, {\n  // Make sure we get the binary data\n  responseType: 'stream'\n});",
  "id": 159630,
  "order": 21,
  "stars": 0,
  "errors": [
    1375,
    1378,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 6,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "module.exports = {\n  apps : [{\n    name: \"api\",\n    script: \"./api.js\",\n    wait_ready: true,\n    listen_timeout: 3000,\n  }],\n}",
  "id": 1228170,
  "order": 5,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 8,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "node scripts/integrate.js --name acme --openapi https://api.acme.com/openapi.json\n# or\nnode scripts/integrate.js --name acme_rss --rss https://acme.com/rss.xml",
  "id": 99520,
  "order": 1,
  "stars": 0,
  "errors": [
    1434,
    2304,
    2304,
    2304,
    1005,
    2304,
    2304,
    1005,
    2304,
    1127,
    1005,
    2304,
    1434,
    2304,
    2304,
    2304,
    1005,
    2304,
    2304,
    1005,
    2304,
    1109
  ],
  "hasCode": true,
  "nondeletedLines": 3,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "ez echo \"why would anyone do this?\"",
  "id": 1805549,
  "order": 5,
  "stars": 0,
  "errors": [
    1434,
    2304,
    1434,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 1,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "invoice.customer = {};",
  "id": 559709,
  "order": 1,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 1,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "// Basic usage\napp.use(session({\n  store: MongoStore.create({ mongoUrl: 'mongodb://localhost/test-app' })\n}));\n\n// Advanced usage\napp.use(session({\n  store: MongoStore.create({\n    mongoUrl: 'mongodb://user12345:foobar@localhost/test-app?authSource=admin&w=1',\n    mongoOptions: advancedOptions // See below for details\n  })\n}));",
  "id": 346983,
  "order": 1,
  "stars": 0,
  "errors": [
    2304,
    2304,
    2304,
    2304,
    2304,
    2304,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 9,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "const Microwork = require('microwork');\n\n// create master\nconst master = new Microwork({host: 'your.rabbit.host', exchange: 'your.exchange'});\n// listen for reply from workers\nawait master.subscribe('response.topic', msg => {\n  console.log(msg); // -> \"hello world!\"\n});\n// send message to workers\nawait master.send('do.work', 'hello');\n\n// after work is done - cleanup\nawait master.stop();",
  "id": 1339181,
  "order": 1,
  "stars": 0,
  "errors": [
    1378,
    1378,
    1378
  ],
  "hasCode": true,
  "nondeletedLines": 7,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "adapter.find('users', {\n    username: 'foobar'\n} {\n    page: 2, // defaults to 1\n    size: 15, // defaults to 30\n    sort: 'username', // defaults to modified_at\n    order: 'asc' // defaults to DESC\n}).then((serialized) => {\n    console.log(serialized);\n});",
  "id": 1754865,
  "order": 3,
  "stars": 0,
  "errors": [
    2304,
    1005
  ],
  "hasCode": true,
  "nondeletedLines": 10,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "// webpack.config.js\n\nvar GenerateFilePlugin = require('generate-file-plugin');\n\n...\nplugins: [\n    new GenerateFilePlugin('index.html.js')\n]",
  "id": 986327,
  "order": 0,
  "stars": 0,
  "errors": [
    1128
  ],
  "hasCode": true,
  "nondeletedLines": 5,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "import Thpace from 'thpace';\n// or\nconst Thpace = require('thpace');\n// or, if you used the CDN, skip those\n\nconst canvas = document.querySelector('#make-me-cool');\n\nconst settings = {\n    colors: ['#4CB1EF',  '#424959',  '#FF4B44'],\n    triangleSize: 100\n};\n\nThpace.create(canvas, settings);",
  "id": 1957543,
  "order": 0,
  "stars": 0,
  "errors": [
    2300,
    2300,
    2584
  ],
  "hasCode": true,
  "nondeletedLines": 8,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "jst.oneOf(\n    [\n        { type: 'number', multipleOf: 5 },\n        jst.number().multipleOf(3).done()\n    ]\n);",
  "id": 1353849,
  "order": 9,
  "stars": 0,
  "errors": [
    2304,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 6,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "        ngxStrHelper.startsWith(\"image.gif\", \"image\");\n        // => Outputs: true\n        ngxStrHelper.startsWith(\".vimrc\", \"vim\", 1);\n        // => Outputs: true",
  "id": 1427432,
  "order": 19,
  "stars": 0,
  "errors": [
    2304,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 2,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "database({\n  network: new NetworkPlugin(),\n})",
  "id": 260230,
  "order": 20,
  "stars": 0,
  "errors": [
    2304,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 3,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "sudo npm i jumanjijs",
  "id": 516828,
  "order": 2,
  "stars": 0,
  "errors": [
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 1,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "// Load the module\nvar ErrorResponder = require('error-responder');\n\n// Add your errorCode-to-statusCode mappings (just do this once when the app loads)\nErrorResponder.config({\n  codeStatusMap: {\n    SOME_ERROR_CODE: 400,\n    ANOTHER_ERROR_CODE: 400,\n    123: 403,\n    456: 404\n    UNAUTHORIZED: 401,\n    BAD_THINGS_HAPPENED: 500\n  }\n});\n\n// Use the ErrorResponder to respond with an error\napp.get('/api/me', function (req, res) {\n  var error = new Error('You need to be logged in to do that');\n  error.code = \"UNAUTHORIZED\";\n  ErrorResponder.build(error).send(res);\n  \n  // -->\n  // STATUS 401\n  // {\n  //   \"error\" : {\n  //     \"code\": \"UNAUTHORIZED\",\n  //     \"message\": \"You need to be logged in to do that\"\n  //   }\n  // }\n});",
  "id": 875564,
  "order": 0,
  "stars": 0,
  "errors": [
    1005,
    2304,
    2339
  ],
  "hasCode": true,
  "nondeletedLines": 16,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "const moment = require('moment');\n\nconst sendToChannel = require('@web-standards-ru/calendar-bot/tlgrm.js');\nconst WSEvent = require('@web-standards-ru/calendar-bot/wsevent.js');\n\nsendToChannel(WSEvent.fromYaml(`name: Яндекс Субботник\ndate: 10.12.2016\ncity: Москва\nlink: https://events.yandex.ru/events/yasubbotnik/10-dec-2016/\n`), 'token', 'channel', 'proxy', (event) => {\n    //this is a default value when this function is not set\n    moment.locale('ru');\n    return `[${event.name}](${event.link})\\n${event.city}, ${moment(event.start).utc().format('DD MMMM YYYY')}`);\n})\n    .then((res) => {\n        const { status, body } = res;\n        //check status == 200\n    })\n    .catch((err) => {\n        console.warn(err);\n    });\n",
  "id": 449000,
  "order": 0,
  "stars": 0,
  "errors": [
    1005,
    1128,
    1128,
    1128,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 17,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "var Raven = require('./bower_components/raven-weapp/build/raven')",
  "id": 232309,
  "order": 1,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 1,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": " this.editor.current.saveImageAsFile()",
  "id": 1647852,
  "order": 17,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 1,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "index.html\n\n<include src=\"components/components1.html\">\n<include src=\"components/components1.html\"></include>",
  "id": 1063168,
  "order": 2,
  "stars": 0,
  "errors": [
    2304,
    2304,
    1005,
    2304,
    17004
  ],
  "hasCode": true,
  "nondeletedLines": 3,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "reader.on('retry', e => console.log(e))",
  "id": 1805886,
  "order": 4,
  "stars": 0,
  "errors": [
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 1,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "module.exports = function BookController ($) {\n  const bookService = $('BookService');\n  return {\n    ...\n  };\n};",
  "id": 686353,
  "order": 3,
  "stars": 0,
  "errors": [
    1109
  ],
  "hasCode": true,
  "nondeletedLines": 6,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "import 'storybook-addon-lag-radar';",
  "id": 1898022,
  "order": 0,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 1,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "pagSeguro.setMode('prod'); // or sanbox, default is prod\npagSeguro.setToken('<your_token>');\npagSeguro.setRedirectURL('http://somepoint/isback');\npagSeguro.setReference('<stuff_ref_number>');\npagSeguro.setNotificationURL('http://somepoint/notification');",
  "id": 1515863,
  "order": 0,
  "stars": 0,
  "errors": [
    2304,
    2304,
    2304,
    2304,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 5,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "AWS.config.region = 'us-east-1';\n\nAWS.config.credentials = new AWS.CognitoIdentityCredentials({\n    IdentityPoolId: 'YOUR IDENTITY POOL ID',\n});",
  "id": 503386,
  "order": 0,
  "stars": 0,
  "errors": [
    2339
  ],
  "hasCode": true,
  "nondeletedLines": 4,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "// getMouseValues(){ ... }\n\nsetup(attachStore){\n\n    // the getMouseValues function will be call before each render and pass to render\n    const onStoreChange = attachStore(getMouseValues)\n\n    // call next on every mouse event\n    onMouseMove(onStoreChange)\n\n    // cleanup logic\n    return ()=> console.warn(\"On remove, do component cleanup here\")\n}// END setup",
  "id": 1110913,
  "order": 6,
  "stars": 0,
  "errors": [
    2552,
    2304,
    1005,
    2304,
    2304,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 5,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "# expose\nnode packages\\cli\\dist\\cli.js examples\\scripts\\counter.js\n# consume\nnode packages\\cli\\dist\\cli.js --clientonly examples\\scripts\\counter-client.js",
  "id": 270296,
  "order": 9,
  "stars": 0,
  "errors": [
    1127,
    1005,
    2304,
    1434,
    2304,
    1435,
    2304,
    1127,
    1128,
    2304,
    1127,
    2304,
    1127,
    2304,
    1005,
    2304,
    1127,
    2304,
    1127,
    2304,
    1127,
    1005,
    2304,
    1434,
    2304,
    1435,
    2304,
    1127,
    1128,
    2304,
    1127,
    2304,
    1127,
    2304,
    1005,
    2304,
    2304,
    1127,
    2304,
    1127,
    2304,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 4,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "var aws = require(\"aws-lib\");\n\nec2 = aws.createEC2Client(yourAccessKeyId, yourSecretAccessKey);\n\nec2.call(\"DescribeInstances\", {}, function(err, result) {\n  console.log(result);\n})",
  "id": 564175,
  "order": 0,
  "stars": 0,
  "errors": [
    2304,
    2304,
    2304,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 5,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "import React from \"react\";\nimport ReactTextRotator from \"react-text-rotator\";\n\nconst content = [\n  {\n    text: \"We shall fight on the beaches.\",\n    className: \"classA\",\n    animation: \"fade\",\n  },\n  {\n    text: \"We shall fight on the landing grounds.\",\n    className: \"classB\",\n    animation: \"zoom\",\n    link: \"https://example.com/\",\n  },\n  {\n    text: \"We shall fight in the fields and in the streets.\",\n    className: \"classC\",\n    animation: \"fade\",\n  },\n  {\n    text: \"We shall fight in the hills.\",\n    className: \"classD\",\n    animation: \"squeeze\",\n  },\n  {\n    text: \"We shall never surrender...\",\n    className: \"classE\",\n    animation: \"zoom\",\n    link: \"https://google.com/\",\n  },\n];\n\nconst MyComponent = () => (\n  <div>\n    <h1>Churchill Speech</h1>\n    <ReactTextRotator content={content} time={5000} startDelay={2000} />\n  </div>\n);",
  "id": 1708128,
  "order": 0,
  "stars": 0,
  "errors": [
    17004,
    17004,
    17004
  ],
  "hasCode": true,
  "nondeletedLines": 37,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "// On Ctrl+C, remove triggers and exit\nprocess.on('SIGINT', function() {\n  liveDb.cleanup(process.exit);\n});",
  "id": 1537202,
  "order": 2,
  "stars": 0,
  "errors": [
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 3,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "var Countdown = require('next-done');\nvar modules   = require('../modules')\n\nmodule.exports = function(done) {\n  var next = new Countdown(Object.keys(modules).length, done)\n  for (var key in modules) new Compilation(modules[key], next);\n}",
  "id": 1414203,
  "order": 0,
  "stars": 0,
  "errors": [
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 6,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "const getParser = require('@carlosvpi/parser')",
  "id": 69930,
  "order": 0,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 1,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "const array = require(\"extra-array\");\n// import * as array from \"extra-array\";\n// import * as array from \"https://unpkg.com/extra-array@2.10.15/index.mjs\"; (deno)\n\nvar x = [1, 2, 3];\narray.get(x, -1);\n// 3\n\nvar x = [1, 2, 3, 4];\narray.swap(x, 0, 1);\n// [2, 1, 3, 4]\n\nvar x = [1, 2, 3, 4];\narray.rotate(x, 1);\n// [4, 1, 2, 3]\n\nvar x = [1, 3, 5, 7];\narray.bsearch(x, 5);\n// 2           ^ found\n\n[...array.permutations([1, 2, 3])];\n// [\n//   [],          [ 1 ],\n//   [ 2 ],       [ 3 ],\n//   [ 1, 2 ],    [ 1, 3 ],\n//   [ 2, 1 ],    [ 2, 3 ],\n//   [ 3, 1 ],    [ 3, 2 ],\n//   [ 1, 2, 3 ], [ 1, 3, 2 ],\n//   [ 2, 1, 3 ], [ 2, 3, 1 ],\n//   [ 3, 1, 2 ], [ 3, 2, 1 ]\n// ]",
  "id": 132505,
  "order": 0,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 10,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "import {fact, theory, suite} from \"type-unit\";\nimport * as assert from \"assert\";\n\n@suite(\"Arithmetic\")\nclass MathTests {\n\n    @fact(\"Should be able to add\")\n    addition() {\n        assert.equal(1 + 1, 2);\n    }\n\n    @theory([\n      [2, 1, 2],\n      [2, 2, 4],\n      [2, 3, 8]\n      ], \"Should be able to exponentiate\")\n    exponentiation(base: number, exponent: number, expectedValue: number) {\n       assert.equal(Math.pow(base, exponent), expectedValue);\n    }\n}",
  "id": 1997355,
  "order": 0,
  "stars": 0,
  "errors": [
    1219,
    1219,
    1219,
    8010,
    8010,
    8010
  ],
  "hasCode": true,
  "nondeletedLines": 17,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "Mathf.grabKey({One:1, Two:2, Three:3}, 1) // One\nMathf.grabKey({One:1, Two:2, Three:3}, 2) // Two\nMathf.grabKey({One:1, Two:2, Three:3}, 3) // Three",
  "id": 1318079,
  "order": 55,
  "stars": 0,
  "errors": [
    2552,
    2552,
    2552
  ],
  "hasCode": true,
  "nondeletedLines": 3,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "import React    from 'react';\nimport ReactDOM from 'react-dom';\n\nif (process.env.NODE_ENV === 'development') {\n  const a11y = require('react-a11y').default;\n  a11y(React, ReactDOM, {\n    rules: {\n      'img-uses-alt': 'warn',\n      'img-redundant-alt': [ 'warn', [ 'image', 'photo', 'foto', 'bild' ]]\n    // ...\n    }\n  });\n}",
  "id": 34193,
  "order": 0,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 11,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "<TabBar\n  getLabelText={({ route }) => route.title}\n  ...\n/>",
  "id": 1684434,
  "order": 13,
  "stars": 0,
  "errors": [
    17004,
    2304,
    1003
  ],
  "hasCode": true,
  "nondeletedLines": 4,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "const stime = require('stime');",
  "id": 1895050,
  "order": 0,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 1,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "polylang.t('errors.invalid_email', 'en', 'test@test.com');",
  "id": 1559284,
  "order": 5,
  "stars": 0,
  "errors": [
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 1,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "const router = require('express').Router()\n\n// we will add this middleware before the generated get endpoint\nlet justReds = (req, res, next) => {\n    req.query.color = 'red'\n    req.query.exclusive = false\n    // do whatever you want here\n    next()\n}\n\nrouter.use('/theModel',theModel.generateApi({\n    middlewares:{\n        get:[{place:'before', handler: justReds}]\n    }\n}))",
  "id": 1817914,
  "order": 7,
  "stars": 0,
  "errors": [
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 11,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "import 'vue-git-comment/dist/vue-git-comment.css';\nimport VueGitComment from 'vue-git-comment';\n\n// var VueGitComment = window.VueGitComment;  // window\n// const VueGitComment = require('VueGitComment'); // commonjs",
  "id": 2060092,
  "order": 0,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 2,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "var options = {\n  out: './dist',\n  src: './src/icons/**/*.png',\n  split: true\n}",
  "id": 1879251,
  "order": 3,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 5,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "// Load the full build.\nvar _ = require('lodash');\n// Load the core build.\nvar _ = require('lodash/core');\n// Load the FP build for immutable auto-curried iteratee-first data-last methods.\nvar fp = require('lodash/fp');\n\n// Load method categories.\nvar array = require('lodash/array');\nvar object = require('lodash/fp/object');\n\n// Cherry-pick methods for smaller browserify/rollup/webpack bundles.\nvar at = require('lodash/at');\nvar curryN = require('lodash/fp/curryN');",
  "id": 1286169,
  "order": 0,
  "stars": 0,
  "errors": [
    2300,
    2300
  ],
  "hasCode": true,
  "nondeletedLines": 7,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "// {app_root}/config/plugin.js\nexports.cache9 = {\n  enable: true,\n  package: 'egg-cache-9',\n};",
  "id": 837640,
  "order": 0,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 4,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "import { bindTypoHandler } from misprint\n\nconst messageFormatter = (url, typo, paragraph) =>\n`Hi!\nYou made a typo: ${typo}\nWhole paragraph: ${paragraph}\nLink: ${url}`\n\nbindTypoHandler(\n    'misha@myrt.co',\n    'Typo on your website',\n    messageFormatter\n)",
  "id": 1348207,
  "order": 0,
  "stars": 0,
  "errors": [
    1141
  ],
  "hasCode": true,
  "nondeletedLines": 11,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "rdtb.count(‘dbname’, key, value)",
  "id": 1623957,
  "order": 9,
  "stars": 0,
  "errors": [
    2304,
    1127,
    2304,
    1127,
    1135,
    2304,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 1,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "locator.reportInterval = 2000\nconsole.info(locator.reportInterval)",
  "id": 287435,
  "order": 2,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 2,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "const chess = new Chess()\nconst pgn = [\n    '[Event \"Casual Game\"]',\n    '[Site \"Berlin GER\"]',\n    '[Date \"1852.??.??\"]',\n    '[EventDate \"?\"]',\n    '[Round \"?\"]',\n    '[Result \"1-0\"]',\n    '[White \"Adolf Anderssen\"]',\n    '[Black \"Jean Dufresne\"]',\n    '[ECO \"C52\"]',\n    '[WhiteElo \"?\"]',\n    '[BlackElo \"?\"]',\n    '[PlyCount \"47\"]',\n    '',\n    '1.e4 e5 2.Nf3 Nc6 3.Bc4 Bc5 4.b4 Bxb4 5.c3 Ba5 6.d4 exd4 7.O-O',\n    'd3 8.Qb3 Qf6 9.e5 Qg6 10.Re1 Nge7 11.Ba3 b5 12.Qxb5 Rb8 13.Qa4',\n    'Bb6 14.Nbd2 Bb7 15.Ne4 Qf5 16.Bxd3 Qh5 17.Nf6+ gxf6 18.exf6',\n    'Rg8 19.Rad1 Qxf3 20.Rxe7+ Nxe7 21.Qxd7+ Kxd7 22.Bf5+ Ke8',\n    '23.Bd7+ Kf8 24.Bxe7# 1-0'\n]\n\nchess.load_pgn(pgn.join('\\n'))\n// -> true\n\nchess.fen()\n// -> 1r3kr1/pbpBBp1p/1b3P2/8/8/2P2q2/P4PPP/3R2K1 b - - 0 24\n\nchess.ascii()\n// -> '  +------------------------+\n//     8 | .  r  .  .  .  k  r  . |\n//     7 | p  b  p  B  B  p  .  p |\n//     6 | .  b  .  .  .  P  .  . |\n//     5 | .  .  .  .  .  .  .  . |\n//     4 | .  .  .  .  .  .  .  . |\n//     3 | .  .  P  .  .  q  .  . |\n//     2 | P  .  .  .  .  P  P  P |\n//     1 | .  .  .  R  .  .  K  . |\n//       +------------------------+\n//         a  b  c  d  e  f  g  h'\n\n// Parse non-standard move formats and unusual line separators\nconst sloppy_pgn = [\n    '[Event \"Wijk aan Zee (Netherlands)\"]',\n    '[Date \"1971.01.26\"]',\n    '[Result \"1-0\"]',\n    '[White \"Tigran Vartanovich Petrosian\"]',\n    '[Black \"Hans Ree\"]',\n    '[ECO \"A29\"]',\n    '',\n    '1. Pc2c4 Pe7e5', // non-standard\n    '2. Nc3 Nf6',\n    '3. Nf3 Nc6',\n    '4. g2g3 Bb4', // non-standard\n    '5. Nd5 Nxd5',\n    '6. c4xd5 e5-e4', // non-standard\n    '7. dxc6 exf3',\n    '8. Qb3 1-0'\n].join('|')\n\nconst options = {\n    newline_char: '\\\\|', // Literal '|' character escaped\n    sloppy: true\n}\n\nchess.load_pgn(sloppy_pgn)\n// -> false\n\nchess.load_pgn(sloppy_pgn, options)\n// -> true\n\nchess.fen()\n// -> 'r1bqk2r/pppp1ppp/2P5/8/1b6/1Q3pP1/PP1PPP1P/R1B1KB1R b KQkq - 1 8'",
  "id": 666189,
  "order": 23,
  "stars": 0,
  "errors": [
    2552
  ],
  "hasCode": true,
  "nondeletedLines": 48,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "// Create data.\nconst p = {\n    name: \"Alice\",\n};\n\n// Run mutation.\nconst mu = new dgraph.Mutation();\nmu.setSetJson(p);\nawait txn.mutate(mu);",
  "id": 790212,
  "order": 8,
  "stars": 0,
  "errors": [
    2304,
    1375,
    1378,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 6,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "\n    import {Accordion} from '@ctmobile/ui';\n",
  "id": 90473,
  "order": 0,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 1,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "const accessToken = await getAccessToken({\n  logger: myLogger\n  logging: true\n})",
  "id": 603960,
  "order": 2,
  "stars": 0,
  "errors": [
    2552,
    2304,
    1005
  ],
  "hasCode": true,
  "nondeletedLines": 4,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "const initialize = require('@abradley2/url-change-event')\n\ninitialize(function getStateFromElement(el) {\n  // this can be anything really. It is passed as the `stateObj` to the history method\n  // (the first argument to either history.replaceState or history.pushState)\n  return {\n    data: el.getAttribute('data-link-state')\n  }\n})",
  "id": 6791,
  "order": 4,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 6,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "const KentaaApi = require('kentaa-api');\nvar ka = new KentaaApi('[your api key]');\n\nasync segmentsDemo()\n{\n  // list all Segments on entire site\n  let segments = await ka.segments.list();\n\n  // get specific Segment by ID\n  let segment = await ka.segments.get([segment_id]);\n}",
  "id": 1228062,
  "order": 10,
  "stars": 0,
  "errors": [
    1434,
    2304,
    2304,
    2552
  ],
  "hasCode": true,
  "nondeletedLines": 7,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "var ngAnnotatify = require('ng-annotatify');",
  "id": 1416734,
  "order": 0,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 1,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": ".config(function (httpEstimateProvider) {\n  httpEstimateProvider.set({\n    verbose: true\n  });\n})",
  "id": 1418450,
  "order": 4,
  "stars": 0,
  "errors": [
    1128,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 5,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "/* Slice number */\n@include above(4) {\n  .above-using-slice-number {\n    background-color: #fff;\n  }\n}\n\n// Compiles to\n@media only screen and (min-width: 992px) {\n  .above-using-slice-number {\n    background-color: #fff;\n  }\n}",
  "id": 1387519,
  "order": 3,
  "stars": 0,
  "errors": [
    1146,
    2304,
    1005,
    1128,
    2304,
    2304,
    2304,
    2693,
    1005,
    2304,
    2304,
    1005,
    1146,
    1434,
    2304,
    1434,
    2304,
    2304,
    2304,
    2304,
    1005,
    1351,
    2304,
    1005,
    1128,
    2304,
    2304,
    2304,
    2693,
    1005,
    2304,
    2304,
    1005
  ],
  "hasCode": true,
  "nondeletedLines": 11,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "$(\"#date\").inputmask(\"datetime\");",
  "id": 1185377,
  "order": 55,
  "stars": 0,
  "errors": [
    2592
  ],
  "hasCode": true,
  "nondeletedLines": 1,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "angular.module('myApp', ['ionic.native']).controller('MyPageController', function ($cordovaCamera) {\n  $cordovaCamera.getPicture().then(\n    function (data) {\n      console.log('Took a picture!', data);\n    },\n    function (err) {\n      console.log('Error occurred while taking a picture', err);\n    }\n  );\n});",
  "id": 221061,
  "order": 1,
  "stars": 0,
  "errors": [
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 10,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "window.stats;",
  "id": 917529,
  "order": 95,
  "stars": 0,
  "errors": [
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 1,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "const kyoml = require('kyoml');\n\nconst json = kyoml.compile(`\n  key1 = 'value1' |> @uppercase\n  key2 = @uppercase <| 'value2'\n`, {\n  mappers: {\n    uppercase: (value) => (value.toUpperCase())\n  }\n})",
  "id": 1249126,
  "order": 4,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 9,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "npx filecoin-big-head --font=3d --color=cyanBright,blue --flash-color=whiteBright",
  "id": 933904,
  "order": 2,
  "stars": 0,
  "errors": [
    1434,
    2304,
    2304,
    2304,
    2304,
    1005,
    2304,
    1351,
    2304,
    1005,
    2304,
    2304,
    2304,
    1005,
    2304,
    2304,
    1005,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 1,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "var express = require('express');\nvar app = express();\n\napp.get('/', function (req, res) {\n  res.send('Hello from the main application');\n});\n\nvar reportingApp = express();\napp.use('/reporting', reportingApp);\n\nvar jsreport = require('jsreport')({\n  express: { app :reportingApp } \n});\n\njsreport.init();\napp.listen(3000);",
  "id": 2159292,
  "order": 2,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 12,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "import { isString } from 'r-assign/lib/string';\n\nisString('abc'); // => true\n\nisString(42); // => false",
  "id": 1609855,
  "order": 5,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 3,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "attrContains('key', 'val') // [key~=val]",
  "id": 347769,
  "order": 2,
  "stars": 0,
  "errors": [
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 1,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "const rmdirp = require('djw-rmdirp');\n\nrmdirp('a/s/f.txt', err => {\n        if (err) {\n            console.log(err);\n            return;\n        }\n\n        console.log(`success`);\n    });\n\nrmdirp('a/s', err => {\n        if (err) {\n            console.log(err);\n            return;\n        }\n\n        console.log(`success`);\n    });",
  "id": 800991,
  "order": 1,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 15,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "BleManager.disconnect(\"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\")\n  .then(() => {\n    // Success code\n    console.log(\"Disconnected\");\n  })\n  .catch((error) => {\n    // Failure code\n    console.log(error);\n  });",
  "id": 489078,
  "order": 5,
  "stars": 0,
  "errors": [
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 7,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "db.transaction(async function (execute, tx){\n    // todo something...\n    \n    let result = await execute('CREATE (p:Person {name: \"Bob\"}) return p')\n\n    // todo something...\n\n    let result2 = await execute('CREATE (p:Person {name: \"Alice\"}) return p')\n\n    // todo something...\n})",
  "id": 331634,
  "order": 4,
  "stars": 0,
  "errors": [
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 4,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "viewer.zoom(0.1);\nviewer.zoom(-0.1);",
  "id": 436574,
  "order": 14,
  "stars": 0,
  "errors": [
    2304,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 2,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "// {app_root}/app.js\n\nclass AppBootHook {\n  constructor (app) {\n    this.app = app;\n  }\n\n  async didLoad () {\n    // registry should return a promise, like:\n    function registry(serviceName, tag) {\n      return Promise.resolve([\n        {\n          peer: '192.x.x.10:6666'\n        },\n        {\n          peer: '192.x.x.11:6666'\n        }\n      ]);\n    }\n    this.app.tchannel.configure({\n      registry: registry\n    });\n  }\n}\n\nmodule.exports = AppBootHook;",
  "id": 840900,
  "order": 1,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 21,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "type TData {\n    (number \\| string)[][] \\| { [name: string]: number \\| string }[]\n}\ninterface ILegend {\n  value: number | string;\n  color: [number, number, number, number?];\n}\ninterface IGridOptions {\n  xDelta: number;\n  xEnd: number;\n  xSize: number;\n  xStart: number;\n  yDelta: number;\n  yEnd: number;\n  ySize: number;\n  yStart: number;\n}\ninterface IContourLineOption {\n  color?: string;\n  weight?: number;\n}\ninterface ILabelOption {\n  font?: string;\n  fillColor?: string;\n  strokeColor?: string;\n}",
  "id": 2144308,
  "order": 1,
  "stars": 0,
  "errors": [
    8008,
    1005,
    1127,
    1003,
    1005,
    1005,
    1127,
    1131,
    1127,
    1131,
    1128,
    1128,
    8006,
    8006,
    8006,
    8006
  ],
  "hasCode": true,
  "nondeletedLines": 26,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "getAllCensoredWords()",
  "id": 2153508,
  "order": 5,
  "stars": 0,
  "errors": [
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 1,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "IL | a2ToCapital",
  "id": 1421835,
  "order": 5,
  "stars": 0,
  "errors": [
    2304,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 1,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "const queue1 = new Heapify(32);\nconst queue2 = new Heapify(16, [], [], Uint16Array, Uint32Array);",
  "id": 1079269,
  "order": 4,
  "stars": 0,
  "errors": [
    2304,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 2,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "let queue = new QueueStorage({ limit: 10, overflow: 'IGNORE' });\n\nfor (let i = 0; i < 20; i++) {\n  queue.push(i);\n}\n\nqueue.size; // 10\nqueue.front; // 9\nqueue.back; // 0",
  "id": 1606748,
  "order": 2,
  "stars": 0,
  "errors": [
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 7,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "const ihubf = require('ihub-framework-js');\n\n(async () => {\n    await ihubf();\n\n    // Your logic here\n    require('some-other-module');\n})();",
  "id": 1122480,
  "order": 1,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 5,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "import App from './App';\nimport Expo from 'expo';\nimport React from 'react';\n\nconst AwakeInDevApp = props => [\n  <App key=\"app\" {...props} />,\n  process.env.NODE_ENV === 'development' ? (\n    <Expo.KeepAwake key=\"keep-awake\" />\n  ) : null,\n];\nExpo.registerRootComponent(AwakeInDevApp);",
  "id": 1626244,
  "order": 7,
  "stars": 0,
  "errors": [
    17004,
    17004
  ],
  "hasCode": true,
  "nondeletedLines": 10,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "import ReactWizard from 'react-bootstrap-wizard';",
  "id": 1629735,
  "order": 0,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 1,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "rokka.sourceimages.meta.delete('myorg', 'c421f4e8cefe0fd3aab22832f51e85bacda0a47a')\n  .then(function(result) {})\n  .catch(function(err) {});",
  "id": 1771968,
  "order": 32,
  "stars": 0,
  "errors": [
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 3,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "var StreamichApi = require(\"streamich-api-jsonp\");\n\nvar api = StreamichApi({\n    key: \"<YOUR_API_KEY>\"\n});\n\napi.things(\"<ID>\", function(err, res) {\n    console.log(err, res);\n});",
  "id": 1901176,
  "order": 1,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 7,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "<MapComponent\n    provider='bing'\n    providerKey='{your app id}'\n    mapId='bing'\n    latitude={51.477222}\n    longitude={0}\n    zoom={15}\n    height={270}\n    useBackgroundImageStyle={true}\n/>",
  "id": 1630632,
  "order": 7,
  "stars": 0,
  "errors": [
    17004,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 10,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "// Using caching to improve perceived performance\nvar myView = Backbone.view.extend({\n  initialize: function () {\n    var self = this;\n\n    this.collection = new Things();\n\n    /**\n    * If a cached response is available, `cacheRead` will trigger\n    */\n    this.listenToOnce(this.collection\n      , 'cacheRead'\n      , function (resp) {\n        // Parse the response and update the collection\n        self.collection.set(self.collection.parse(resp));\n        self.render();\n      });\n\n    /**\n    * Perform a fetch.\n    * Note: Even if a cached response was found, the request\n    * will still happen, and this callback will still fire.\n    */\n    this.collection.fetch(function (err) {\n      if(err) return alert(err);\n\n      self.stopListening(self.collection, 'cacheRead')\n\n      self.render();\n    });\n  }\n});",
  "id": 578844,
  "order": 0,
  "stars": 0,
  "errors": [
    2304,
    2304,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 25,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "const screenshot = require('screenshot-phantom');\nconst rule = '0 * * * * *';\n\nscreenshot({\n\n  urls: [\n    'http://google.com',\n    'http://www.bing.com//'\n  ],\n  rule\n\n});",
  "id": 1804900,
  "order": 3,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 9,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "truncateMiddle('the quick brown', 50, 50);\n// Result:\n//  'the quick brown'",
  "id": 1986192,
  "order": 5,
  "stars": 0,
  "errors": [
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 1,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "import { Date as ParseDate } from 'prismic-reactjs'\nParseDate(mydoc.data.mydate)",
  "id": 313878,
  "order": 3,
  "stars": 0,
  "errors": [
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 2,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "const mockField = 'AnObject'\nnew API().getApi()",
  "id": 834907,
  "order": 31,
  "stars": 0,
  "errors": [
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 2,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "// If you get one or more result(s), it will return an \"array\".\nresult = [\n  {\n    title: string,\n    author: string[],\n    publisher: string[],\n    publicationDate: string,\n    imageUrl: string | null,\n    introduction: string,\n    price: {\n      discount: number,\n      currentPrice: number,\n    },\n    url: string,\n  },\n  { ... }, { ... }, ...\n];\n\n// If you have not got any result, it will return a \"null\".\nresult = null;",
  "id": 885045,
  "order": 3,
  "stars": 0,
  "errors": [
    2304,
    2693,
    2693,
    1011,
    2693,
    1011,
    2693,
    2693,
    18050,
    2693,
    2693,
    2693,
    2693,
    1109,
    1109,
    1109,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 17,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "nav.reset();\n\nnav.move.left();\n\nnav.move.up();\n\nnav.move.right();\n\nnav.move.down();\n\n<div class=\"btn focusable\" data-focus-action-link=\"https://www.subidote.com\">OK</div>\n<div class=\"btn focusable\" data-focus-action-function=\"console.log('LOL')\">OK</div>\n\nnav.action();\n\nnav.focusById(1574711748163);\n\nnav.groupBy('pop');\nundefined\nnav.curretGroup;\n\"pop\"\nnav.ungroup();\nundefined\n\nnav.map.draw();\n\nnav.map.clear();\n\nnav.focusArea('zone-1', 'bottom', 'right');\n\nnav.focusArea('zone-1'); // top left",
  "id": 1873164,
  "order": 1,
  "stars": 0,
  "errors": [
    2304,
    2304,
    2304,
    2304,
    2304,
    17004,
    2657,
    17004,
    2304,
    2304,
    2304,
    2304,
    2304,
    2304,
    2304,
    2304,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 19,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "cloud.init(mpserverless, {\n  // 配置此参数后，拥有回调消息的 openapi 将回调该地址\n  notify: {\n    url: 'https://callback',\n  },\n})",
  "id": 498675,
  "order": 1,
  "stars": 0,
  "errors": [
    2304,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 5,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "const audio_options = {\n  source:{remote:{uri:\"http://www.sample-videos.com/audio/mp3/india-national-anthem.mp3\"}}\n}",
  "id": 1658924,
  "order": 2,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 3,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "// PATCH: /projects/{projectId}\nconst response = await bluedot.api.updateProject(projectId, body);",
  "id": 612294,
  "order": 19,
  "stars": 0,
  "errors": [
    1375,
    1378,
    2304,
    2304,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 1,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "\nlet actionCreator = createAction('ACTION', {\n  required: true,\n  type: 'object',\n  properties: {\n    hello: {\n      required: true,\n      type: 'string',\n      description: 'A greeting'\n    }\n  }\n});\n\nexpect(actionCreator()).to.deep.equal({\n  type: 'ACTION',\n  error: true,\n  payload: new Error('payload is required')\n});\n\nexpect(actionCreator({})).to.deep.equal({\n  type: 'ACTION',\n  error: true,\n  payload: new Error('payload.hello is required')\n});\n\nexpect(actionCreator({hello: 123})).to.deep.equal({\n  type: 'ACTION',\n  error: true,\n  payload: new Error('payload.hello is the wrong type')\n});\n\nexpect(actionCreator({hello: 'world'})).to.deep.equal({\n  type: 'ACTION',\n  payload: {hello: 'world'}\n});",
  "id": 970103,
  "order": 2,
  "stars": 0,
  "errors": [
    2304,
    2304,
    2304,
    2304,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 30,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "import { CacheService } from \"react-native-cache-async\";\n\nclass MyApp {\n  constructor() {\n    this.cacheService = new CacheService();\n  }\n  \n  async insertCacheValue() {\n    const userData = {\n      name: 'Maikon',\n      age: 23\n    }\n  \n    // Means that if now is 8:30 PM, will expire at 8:35PM\n    const timeToExpire = 5;\n  \n    await this.cacheService.set('userData', userData, timeToExpire);\n  }\n  \n  async getCacheValue() {\n    const isExpired = await this.cacheService.isExpired('userData');\n    \n    if (!isExpired) {\n      // If exists returns the object, else returns false.\n      return await this.cacheService.get('userData');\n    }\n    \n    return 'Expired key!';\n  }\n  \n  async removeCacheKey() {\n    return await this.cacheService.removeKey('userData');\n  }\n}",
  "id": 1660495,
  "order": 1,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 24,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "\nconst RACV = require('racv')\n\nRACV.url('https://blackmoon.net/_next/static/GdcSUDy8aNOaxTTi_H4hc/pages/login.js')\n.then(success => console.log(success), err => console.log(err))\n",
  "id": 1611705,
  "order": 0,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 3,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "emojify.run();\n// OR\nemojify.run(document.getElementById('my-element'))\n// OR\nemojify.run(null, function(emoji, emojiName){\n  var span = document.createElement('span');\n  span.className = 'emoji emoji-'  + emojiName;\n  span.innerHTML = emoji + ' replaced';\n  return span;\n});",
  "id": 464580,
  "order": 1,
  "stars": 0,
  "errors": [
    2304,
    2304,
    2584,
    2304,
    2584
  ],
  "hasCode": true,
  "nondeletedLines": 8,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "// index.js\nconst { CoinSpot } = require('coinspotapi');\nconst client = new CoinSpot('key', 'secret');",
  "id": 169573,
  "order": 0,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 2,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "const express = require('express');\nconst path = require('path');\nconst app = express();\n\napp.use(express.static('./build'));\n\napp.get('/', function (req, res) {\n  res.sendFile(path.join(__dirname, './build', 'index.html'));\n});\n\napp.listen(9000);",
  "id": 791798,
  "order": 22,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 8,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "git clone git@github.com:bitcoin-computer/computer.git\ncd computer\nnpm install\nnpm test",
  "id": 56035,
  "order": 4,
  "stars": 0,
  "errors": [
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    1146,
    2304,
    2304,
    2304,
    1434,
    2304,
    2304,
    1434,
    2304,
    2304,
    1434,
    2304,
    2593
  ],
  "hasCode": true,
  "nondeletedLines": 4,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "// policies.js\n\n// Simple example\nexport default {\n  Post: (action, model, user) => {\n    if (user.activated === false) { return false; }\n    if (user.role === 'admin') { return true; }\n\n    switch (action) {\n      case 'Create':\n        return true;\n      case 'Edit':\n        return (model.editable && user.id === model.user.id);\n      default:\n        return false;\n    }\n  },\n  Comment: (action, model, user) => {\n    if (user.activated === false) { return false; }\n    if (user.role === 'admin') { return true; }\n\n    switch (action) {\n      case 'Create':\n        return true;\n      default:\n        return false;\n    }\n  }\n};\n\n// Function based example\n\nimport { createPolicy, toPolicyObject } from 'react-pundit';\n\nconst PostPolicy = createPolicy('Post');\n\nPostPolicy.addAction('Edit', (model, user) => {\n  return user.activated && (user.role === 'admin' || (model.editable && user.id === model.user.id));\n});\n\nPostPolicy.addAction('Create', (model, user) => {\n  return user.activated;\n});\n\nconst CommentPolicy = createPolicy('Comment');\n\nCommentPolicy.addAction('Create', (model, user) => {\n  return user.activated;\n});\n\nexport default toPolicyObject([PostPolicy, CommentPolicy]);\n\n// OO example\n\nimport { PunditPolicy, toPolicyObject } from 'react-pundit';\n\nclass PostPolicy extends PunditPolicy {\n  constructor() {\n    super('Post');\n  }\n\n  Edit(model, user) {\n    return user.activated && (user.role === 'admin' || (model.editable && user.id === model.user.id));\n  }\n\n  Create(model, user) {\n    return user.activated;\n  }\n}\n\nclass CommentPolicy extends PunditPolicy {\n  constructor() {\n    super('Comment');\n  }\n\n  Create(model, user) {\n    return user.activated;\n  }\n}\n\nexport default toPolicyObject([new PostPolicy(), new CommentPolicy()]);\n",
  "id": 1694298,
  "order": 0,
  "stars": 0,
  "errors": [
    2528,
    2528,
    2300,
    2451,
    2451,
    2528,
    2300,
    2451,
    2451,
    2528
  ],
  "hasCode": true,
  "nondeletedLines": 58,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "import 'bootstrap/dist/css/bootstrap.css';",
  "id": 1636525,
  "order": 0,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 1,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "googleSignIn.singIn(config, callbacks);",
  "id": 1401749,
  "order": 3,
  "stars": 0,
  "errors": [
    2304,
    2304,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 1,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "var router = new VueRouter();\nVue.use(Auth, {\n    router: router,\n    http: http\n});",
  "id": 2055643,
  "order": 5,
  "stars": 0,
  "errors": [
    2552,
    2304,
    2304,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 5,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "const Srf = require('drachtio-srf');\nconst srf = new Srf() ;\nconst digestAuth = require('drachtio-mw-digest-auth') ;\n\nsrf.connect({...}) ;\n\nconst challenge = digestAuth({\n  realm: 'sip.drachtio.org',\n  passwordLookup: function(username, realm, callback) {\n    // ..lookup password for username in realm\n    return callback(null, password) ;\n  }\n}) ;\n\nsrf.use( 'register', challenge) ;\n\nsrf.register((req, res) => {\n\n  // if we reach here we have an authenticated request\n\n  console.log(req.authorization) ;\n  /*\n    Digest: username=\"103482\",realm=\"sip.drachtio.org\",nonce=\"df24fd41-4fc5-416f-b163-90f774ca0358\" \\\n      uri=\"sip:73.15.46.10:6060\",algorithm=MD5,response=\"a4881ad854cc0677158206ac9fa90e3b\", \\\n      qop=auth,nc=00000032,cnonce=\"ea5cec20\"\n\n    console.log =>\n    {\n      scheme: 'digest',\n      username: '103482',\n      realm: 'sip.drachtio.org',\n      nonce: 'df24fd41-4fc5-416f-b163-90f774ca0358',\n      uri: 'sip:72.1.46.10:6060',\n      algorithm: 'MD5',\n      response: 'a4881ad854cc0677158206ac9fa90e3b',\n      qop: 'auth',\n      nc: '00000032',\n      cnonce: 'ea5cec20'\n    }\n   */\n  } \n});",
  "id": 813577,
  "order": 0,
  "stars": 0,
  "errors": [
    1109,
    2304,
    1005
  ],
  "hasCode": true,
  "nondeletedLines": 33,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "const update = async function(req, res){\n    let err, user, data, client, able;\n    user = req.user;\n    client = req.client;\n    data = req.body;\n    user.set(data);\n\n    [err, user] = await to(user.save());\n    if(err) return ReE(res, err, 422);\n    return ReS(res, {message :'Updated User: '+ client.clientId});\n}",
  "id": 875452,
  "order": 1,
  "stars": 0,
  "errors": [
    2304,
    2304,
    2552
  ],
  "hasCode": true,
  "nondeletedLines": 10,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "import { rawToModule, compileModule, makeModule } from \"import-export-merger\";\n\nconst merge = pipe(rawToModule, compileModule, makeModule);\n\nconst output = merge([\n  { body: 'import { myFunction } from \"./moduleB\";', filepath: \"./moduleA\" },\n  { body: \"export function myFunction() {}\", filepath: \"./moduleB\" },\n]);",
  "id": 1128789,
  "order": 6,
  "stars": 0,
  "errors": [
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 6,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "var config = {\n  some: 'defaultValue'\n}\n\nmodule.exports = require('extend-or-modify')(config, './config.mod.js')",
  "id": 909317,
  "order": 0,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 4,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "var boundary = require('simplicial-complex-boundary')\n\nvar cells = [\n  [0,1,2],\n  [1,2,3]\n]\n\nconsole.log(boundary(cells))",
  "id": 1845461,
  "order": 0,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 6,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "import React, {Component, PropTypes} from 'react';\nimport {connect} from 'react-redux';\nimport {add, remove} from './actions/list';\n\n...\n\nconst mapStateToProps = (state) => ({ list: state.myList });\nconst mapDispatchToProps = dispatch => {\n  return multireducerBindActionCreators('additional', {add, remove}, dispatch);\n}\nListComponent = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ListComponent);\n\nexport default ListComponent;",
  "id": 1386557,
  "order": 4,
  "stars": 0,
  "errors": [
    1128,
    2304,
    2552,
    2552,
    2552
  ],
  "hasCode": true,
  "nondeletedLines": 13,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "$(\"#box\").css({ translate: [60,30] });\n$(\"#box\").css({ translate: ['60px','30px'] });\n$(\"#box\").css({ translate: '60px,30px' });",
  "id": 1186144,
  "order": 3,
  "stars": 0,
  "errors": [
    2592,
    2592,
    2592
  ],
  "hasCode": true,
  "nondeletedLines": 3,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "\n//最大使用9个子进程处理请求。\napp.autoWorker(9)\n\n//...\n\napp.daemon(1234, 2)\n",
  "id": 1961001,
  "order": 4,
  "stars": 0,
  "errors": [
    2304,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 2,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "import ModalActivityIndicator from 'react-native-modal-activityindicator'\n...\n\nrender(){\n    return (\n        <View ...>\n            ...\n            <ModalActivityIndicator visible={this.state.visible} size='large' color='white' />\n        </View>\n    )\n}",
  "id": 1674029,
  "order": 0,
  "stars": 0,
  "errors": [
    1128,
    2304,
    1005,
    1003
  ],
  "hasCode": true,
  "nondeletedLines": 10,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "const providers = [\n    '@adonisjs/framework/providers/AppProvider',\n    '@backwood/backwood'\n]",
  "id": 581221,
  "order": 1,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 4,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "import { Navbar, Jumbotron, Button } from 'react-bootstrap';",
  "id": 555052,
  "order": 11,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 1,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "\nmattingEditor.undo();\n",
  "id": 1319243,
  "order": 21,
  "stars": 0,
  "errors": [
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 1,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "import { readFileSync } from \"fs\";\n\nimport { createSecureServer } from \"http2\";\n\nimport { HttpCheck } from \"@distributejs/http-check\";\n\n(async () => {\n    const server = createSecureServer({\n        cert: readFileSync(\"path-to-cert-file\"),\n        key: readFileSync(\"path-to-key-file\"),\n    });\n\n    server.on(\"request\", (request, response) => {\n        response.end(JSON.stringify({\n            customerId: 543,\n            key: 1,\n            productId: 2558,\n        }));\n    });\n    \n    const httpCheck = new HttpCheck(server);\n    \n    await httpCheck.start();\n\n    const response = await httpCheck.send({\n        \":method\": \"GET\",\n        \":path\": \"/customers/543/favourites\",\n    });\n\n    await httpCheck.end();\n})();\n",
  "id": 109340,
  "order": 6,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 23,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "var targetRect = event.targetElement.getBoundingClientRect(),\n    targetBounds = targetRect.left + ',' + targetRect.top + ',' + targetRect.width + ',' + targetRect.height;\n\nwindow.plugins.socialsharing.setIPadPopupCoordinates(targetBounds);\nwindow.plugins.socialsharing.share('Hello from iOS :)')",
  "id": 728029,
  "order": 7,
  "stars": 0,
  "errors": [
    2552,
    2304,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 4,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "declare interface Foo {\n    \"foo\": string;\n    \"bar\": number;\n    \"baz\": {\n        \"fizz\": null|undefined;\n        \"buzz\": boolean;\n    };\n}",
  "id": 1057101,
  "order": 1,
  "stars": 0,
  "errors": [
    8006
  ],
  "hasCode": true,
  "nondeletedLines": 8,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "import {RulePolicy} from './RulePolicy';\n\n/**\n * Use this class as a base [extends] class for simple rules. A simple contains\n * a single rule and target to evaluate.\n *\n * If you require a rule that will contain more than one rule, you should\n * use extend the [CompositeRule] class.\n */\nexport class SimpleRule extends RulePolicy {\n\n    /**\n     * The constructor for the simple rule.\n     * @param name: The name of the rule.\n     * @param message: The message to display if the rule is violated.\n     */\n    constructor(name: string, message: string, isDisplayable: boolean) {\n        super(name, message, isDisplayable);\n    }\n}",
  "id": 513993,
  "order": 8,
  "stars": 0,
  "errors": [
    8010,
    8010,
    8010
  ],
  "hasCode": true,
  "nondeletedLines": 18,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "endpointParser.json2decomposed('jquery', '~1.9.1');\n// { name: 'jquery', source: 'jquery', target: '~1.9.1' }\n\nendpointParser.json2decomposed('backbone', 'backbone-amd#~1.0.0');\n// { name: 'backbone', source: 'backbone-amd', target: '~1.0.0' }\n\nendpointParser.json2decomposed('bootstrap', 'http://twitter.github.io/bootstrap/assets/bootstrap');\n// { name: 'bootstrap', source: 'http://twitter.github.io/bootstrap/assets/bootstrap', target: '*' }",
  "id": 621769,
  "order": 2,
  "stars": 0,
  "errors": [
    2304,
    2304,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 3,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "  x-identity\n  x-signature",
  "id": 1613271,
  "order": 2,
  "stars": 0,
  "errors": [
    2304,
    2304,
    2304,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 2,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "new Hovercard({\n  getData: word => new Promise((resolve, reject) => {\n    fetch(\"my-api\")\n      .then(data => resolve(data))\n      .catch(error => reject(error));\n  })\n})",
  "id": 1095134,
  "order": 4,
  "stars": 0,
  "errors": [
    2304,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 7,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "全局 \nVue.component('particle-effect-bg',ParticleEffect)",
  "id": 1522724,
  "order": 0,
  "stars": 0,
  "errors": [
    2304,
    2304,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 2,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "import {foo, bar} from \"mod\";\n\nexport default function() {\n  // ...\n}\n\nconst baz = 42,\n      bat = class Bat {};\n\nexport {\n  baz,\n  bat\n};",
  "id": 28403,
  "order": 0,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 9,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "my-new-component/\n    my-new-component.html\n    my-new-component.js\n    my-new-component.less",
  "id": 987098,
  "order": 2,
  "stars": 0,
  "errors": [
    2304,
    1109,
    2304,
    2304,
    1109,
    2304,
    2304,
    1109,
    2304,
    2304,
    1109,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 4,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": " import React from \"react\";\n import TusUploady from \"@rpldy/tus-uploady\";\n import UploadButton from \"@rpldy/upload-button\";\n \n const App = () => (<TusUploady\n     destination={{ url: \"https://my-tus-server/upload\" }}\n     chunkSize={2142880}\n     sendDataOnCreate>\n     <UploadButton/>\n </TusUploady>);",
  "id": 349464,
  "order": 3,
  "stars": 0,
  "errors": [
    17004,
    17004
  ],
  "hasCode": true,
  "nondeletedLines": 9,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "var remove = require('@kingjs/descriptor.remove');\n\nvar descriptor = { x:0 };\nremove.call(descriptor, 'x');",
  "id": 212722,
  "order": 0,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 3,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "callApi(\n    path: string,\n    httpMethod: string,\n    pathParams?: any,\n    queryParams?: any,\n    headerParams?: any,\n    formParams?: any,\n    bodyParam?: any,\n    contentTypes?: string[],\n    accepts?: string[],\n    returnType?: any,\n    contextRoot?: string,\n    responseType?: string\n): Promise<any>;",
  "id": 82491,
  "order": 14,
  "stars": 0,
  "errors": [
    2304,
    2304,
    1005,
    2693,
    2304,
    1005,
    2693,
    2304,
    1109,
    2693,
    2304,
    1109,
    2693,
    2304,
    1109,
    2693,
    2304,
    1109,
    2693,
    2304,
    1109,
    2693,
    2304,
    1109,
    2693,
    1011,
    2304,
    1109,
    2693,
    1011,
    2304,
    1109,
    2693,
    2304,
    1109,
    2693,
    2304,
    1109,
    2693,
    1005,
    2693,
    1109
  ],
  "hasCode": true,
  "nondeletedLines": 14,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "adapter.save('john', 'john@email.com', 'secret', function(err, user) {\n  if (err) console.log(err);\n  console.log(user);\n  // {\n  //  _id: '8c7cd00c55a25ceb279a8e893d011b3e',\n  //  _rev: '1-530a4cd8e67d51daf74e059899c39cd5',\n  //  password_scheme: 'pbkdf2',\n  //  iterations: 10,\n  //  name: 'john',\n  //  email: 'john@email.com',\n  //  roles: [ 'user' ],\n  //  type: 'user',\n  //  signupToken: 'fed26ce9-2628-405a-b9fa-285d4a66f4c3',\n  //  signupTimestamp: '2013-09-21T10:10:50.357Z',\n  //  signupTokenExpires: '2014-01-15T15:27:29.020Z',\n  //  failedLoginAttempts: 0,\n  //  derived_key: '0a2b1714d6017e7efdc1154ee34c805dea29c06a',\n  //  salt: '3a213c87b6a33c70fec767acea697994'\n  // }\n});",
  "id": 1285094,
  "order": 3,
  "stars": 0,
  "errors": [
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 4,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "import { walkWzFileAsync, /* ... */ } from '@tybys/wz'",
  "id": 414642,
  "order": 3,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 1,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "const Pdf2Canvas = require('pdf2canvas');\n\nconst pdfCanvas = new Pdf2Canvas('./test.pdf');",
  "id": 1530632,
  "order": 0,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 2,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "import * as React from 'react';\n\nimport MyRealApp from './my-app.js';\n\nexport default function MyReactApp () {\n  return (\n    <div class=\"ugly-jsx\">\n      <MyRealApp to-whom=\"Jeremy\" />\n    </div>\n  );\n}",
  "id": 2091591,
  "order": 6,
  "stars": 0,
  "errors": [
    17004,
    17004
  ],
  "hasCode": true,
  "nondeletedLines": 9,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "  <PromisedReactComponent\n    promise_name={() => Promise.resolve(true)}\n    ref={inst => (this.scrInst = inst)}\n  />\n\n  // Later in the code\n  this.scrInst.retryPromise();",
  "id": 1694048,
  "order": 1,
  "stars": 0,
  "errors": [
    17004,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 5,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "var module = angular.module('foo', []);\n\n// inline array annotation\nmodule.factory('bar', ['qux', function (qux) { ... }]);\n\n// $inject property annotation\nvar bar = function (qux) { ... };\nbar.$inject = ['qux'];\nmodule.factory('bar', bar);\n\n// function parameter names\nmodule.factory('bar', function (qux) { ... });",
  "id": 1419039,
  "order": 3,
  "stars": 0,
  "errors": [
    2304,
    1128,
    1109,
    1128,
    1128,
    1109
  ],
  "hasCode": true,
  "nondeletedLines": 6,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "var controller = lib.FundController;",
  "id": 1932525,
  "order": 36,
  "stars": 0,
  "errors": [
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 1,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "const players = Plyr.setup('.js-player');",
  "id": 1554732,
  "order": 5,
  "stars": 0,
  "errors": [
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 1,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "const splitProxy = require('split-proxy');\nsplitProxy('123.123.2.42:8080@superLogin:superPassword', { mode: 'node-tunnel' });\n\n// return this:\n// {\n//   host: '123.123.2.42',\n//   port: 8080,\n//   proxyAuth: 'superLogin:superPassword'\n// }",
  "id": 1876239,
  "order": 9,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 2,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "undefined\n[\n  {\n    \"file\": \"lib/plugin/exec/alias.js\",\n    \"hash\": {\n      \"sha1\": \"a82a88fb21865c7592ce6237b1c3765be4968126\",\n      \"md5\": \"91706a26c49eb622a3539a3a48f04b37\"\n    }\n  },\n  {\n    \"file\": \"lib/plugin/exec/index.js\",\n    \"hash\": {\n      \"sha1\": \"972513e4a08106fdc40b896e5b82d173c961391a\",\n      \"md5\": \"070027151d1a2b74924bb409885a0cbb\"\n    }\n  }\n]",
  "id": 1108602,
  "order": 19,
  "stars": 0,
  "errors": [
    18050,
    2695
  ],
  "hasCode": true,
  "nondeletedLines": 17,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "import Client from 'gql-sketch';\n\nClient('http://example.com/my-graphql-endpoint').query(`\n  {\n    allFilms {\n      films {\n        title,\n        actor,\n        catchphrase\n      }\n    }\n  }\n`).then(\n  ({ allFilms }) => {\n    log('result!');\n    log(allFilms.films[0].title);\n  }\n)",
  "id": 1018118,
  "order": 0,
  "stars": 0,
  "errors": [
    2304,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 17,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "const myLibrary = pluginize({\n    clone: {\n        sum: 'newSum'\n    },\n    numbers: [1,2,3,4,5,6],\n    plugins: [CalculationPlugin]\n})\nconst result = myLibrary.run();\n/*\n    result: {\n        // the whole context\n        ...\n            sum: 21,\n            newSum: 21,\n        ...\n    }\n*/",
  "id": 1554156,
  "order": 17,
  "stars": 0,
  "errors": [
    2304,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 16,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "Insync.sortBy(['file1', 'file2', 'file3'], function (file, callback) {\n\n    fs.stat(file, function (err, stats) {\n\n        callback(err, stats.mtime);\n    });\n}, function (err, results) {\n\n    // Results is now the original array of files sorted by\n    // modified date\n});",
  "id": 1141349,
  "order": 13,
  "stars": 0,
  "errors": [
    2304,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 6,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "#!/usr/bin/env node\n\nvar path = require('path')\n  , husk = require('..').exec().fs()\n  .plugin([\n    require('husk-pluck')\n  ]);\n\nvar name = path.basename(__filename) + '-example.log'\n  , content = '[file content]';\n\nhusk()\n  .open(name, 'w')\n  .pluck(1)\n  .async(function writer(cb) {\n    var fd = this.valueOf();\n    var h = husk(fd)\n      // write to fd is aliased write() -> fdwrite()\n      .fdwrite(fd, content)\n      .close(fd)\n      .run(cb);\n  })\n  // re-read and print file to verify write\n  .cat(name)\n  .print(console.log)\n  // clean up file\n  .unlink(name)\n  .run();",
  "id": 1578190,
  "order": 16,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 22,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "git clone git@github.com:tachyons-css/tachyons-background-overlays.git",
  "id": 1929545,
  "order": 1,
  "stars": 0,
  "errors": [
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    1146,
    2304,
    2304,
    2304,
    2304,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 1,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "var interstitialAdUnitId = Platform.OS === 'ios' ? 'appsamurai-sample-ios-banner-ad-id' : 'appsamurai-sample-android-banner-ad-id'\nvar gadInterstitialAdUnitId = Platform.OS === 'ios' ? '/6499/example/interstitial' : '/6499/example/interstitial'\n\nvar testDeviceIDs = [\n    'test-device-id-1',\n    'test-device-id-2',\n    'test-device-id-3'\n];\n\nAppSamuraiInterstitial.setTestDevices(testDeviceIDs);\nAppSamuraiInterstitial.setAdUnitID(interstitialAdUnitId);\nAppSamuraiInterstitial.setGADAdUnitID(gadInterstitialAdUnitId);\nAppSamuraiInterstitial.addEventListener('adLoaded',\n    () => this.setLog('AppSamuraiInterstitial adLoaded')\n);\nAppSamuraiInterstitial.addEventListener('adFailedToLoad',\n    () => this.setLog('AppSamuraiInterstitial adFailedToLoad')\n);\nAppSamuraiInterstitial.addEventListener('adOpened',\n    () => this.setLog('AppSamuraiInterstitial adOpened')\n);\nAppSamuraiInterstitial.addEventListener('adClosed',\n    () => this.setLog('AppSamuraiInterstitial adClosed')\n);\nAppSamuraiInterstitial.addEventListener('adLeftApplication',\n    () => this.setLog('AppSamuraiInterstitial adLeftApplication')\n);\nAppSamuraiInterstitial.requestAd();",
  "id": 30619,
  "order": 4,
  "stars": 0,
  "errors": [
    2304,
    2304,
    2304,
    2304,
    2304,
    2304,
    2304,
    2304,
    2304,
    2304,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 26,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "const { A11yCat } = require('../../dist/index')\nconst { resolve } = require('path')\n\nconst ocr = new A11yCat.OCR()\n\nasync function main() {\n\n    try {\n\n        // Set the path to the pdf you want to OCR\n        const pdfPath = '/path/to/my.pdf'\n\n        // Set a destination directory for the pdf images\n        const destinationDir = resolve(process.cwd() + '/tmp')\n\n        // Convert a pdf to a series of images\n        const generatedImages = await ocr.convertPdfToImages(pdfPath, destinationDir) \n\n        // Run OCR on one of the generated images\n        const textFile = await ocr.tess(generatedImages[0])\n\n    } catch (error) {\n        throw error\n    }\n\n}\n\nmain()\n",
  "id": 473195,
  "order": 0,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 14,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "// This static route can be used to load images and other assets that shouldn't\n// be combined.\n//\napp.use('/public', express.static(__dirname + '/public'));\n\n// This route will combine requests for files in the public directory, and will\n// also automatically rewrite relative paths in CSS files to point to the\n// non-combohandled static route defined above.\n//\napp.get('/combo', combo.combine({\n    rootPath: __dirname + '/public',\n    basePath: '/public'\n}), combo.respond);\n\n// The equivalent config as the previous route, except using webRoot\napp.get('/combo', combo.combine({\n    rootPath: __dirname + '/public',\n    webRoot : __dirname\n}), combo.respond);",
  "id": 696750,
  "order": 8,
  "stars": 0,
  "errors": [
    2304,
    2304,
    2304,
    2304,
    2304,
    2304,
    2304,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 9,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "const MessengerSamples = require('botkit-messenger-samples');",
  "id": 620722,
  "order": 0,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 1,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "piskel-cli snow-monster.piskel --scale 5",
  "id": 1547435,
  "order": 1,
  "stars": 0,
  "errors": [
    2304,
    2304,
    1005,
    2304,
    2304,
    1005,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 1,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "let data = await Gab.users.fetchUser(GAB_USER_ACCESS_TOKEN, 'markmiscavage');",
  "id": 977594,
  "order": 13,
  "stars": 0,
  "errors": [
    1375,
    1378,
    2304,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 1,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "import { it, expect } from \"@playwright/test\";\n\nit(\"is a basic test with the page\", async ({ page }) => {\n  await page.goto(\"https://playwright.dev/\");\n  const name = await page.innerText(\".navbar__title\");\n  expect(name).toBe(\"Playwright\");\n});",
  "id": 318801,
  "order": 0,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 6,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "import Highcharts from 'highcharts';\n// Alternatively, this is how to load Highstock. Highmaps and Highcharts Gantt are similar.\n// import Highcharts from 'highcharts/highstock';\n\n// Load the exporting module.\nimport Exporting from 'highcharts/modules/exporting';\n// Initialize exporting module. (CommonJS only)\nExporting(Highcharts);\n\n// Generate the chart\nHighcharts.chart('container', {\n  // options - see https://api.highcharts.com/highcharts\n});",
  "id": 1276642,
  "order": 3,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 5,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "\n// 2. This will return true\n\n// Before Transaction, Table player have 0 rows\nawait conn.transaction(async (t) => {\n  await t.query('INSERT INTO player SET ?', [{name: 'Max', points: 400}]);\n  await t.query('INSERT INTO player SET ?', [{name: 'Max2', points: 400}]);\n  await t.query('INSERT INTO player SET ?', [{name: 'Max3', points: 400}]);\n  await t.query('INSERT INTO player SET ?', [{name: 'Max4', points: 400}]);\n  await t.query('INSERT INTO player SET ?', [{name: 'Max5', points: 400}]);\n});\n// After Transaction, Table player will have 5 rows\n// Because transaction succeded\n",
  "id": 1395454,
  "order": 6,
  "stars": 0,
  "errors": [
    1375,
    1378,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 7,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "client.getUsers({httpMethod: \"POST\", body: '{\"v\": \"some body\"}' }, function(error, response, body) {\n    console.log(body);\n});",
  "id": 1796976,
  "order": 7,
  "stars": 0,
  "errors": [
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 3,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "const knex = require('knex')({\n  client: 'mysql',\n  connection: process.env.MYSQL_DATABASE_CONNECTION\n})\nconst bookshelf = require('bookshelf')(knex)\n\nconst User = bookshelf.model('User', {\n  tableName: 'users',\n  posts() {\n    return this.hasMany(Posts)\n  }\n})\n\nconst Post = bookshelf.model('Post', {\n  tableName: 'posts',\n  tags() {\n    return this.belongsToMany(Tag)\n  }\n})\n\nconst Tag = bookshelf.model('Tag', {\n  tableName: 'tags'\n})\n\nnew User({id: 1}).fetch({withRelated: ['posts.tags']}).then((user) => {\n  console.log(user.related('posts').toJSON())\n}).catch((error) => {\n  console.error(error)\n})",
  "id": 616610,
  "order": 2,
  "stars": 0,
  "errors": [
    2552
  ],
  "hasCode": true,
  "nondeletedLines": 25,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "jsonApi.define('product', {\n  title: '',\n  description: ''\n  price: ''\n}, {\n  readOnly: ['price'],\n  collectionPath: 'awesome-products',\n  serializer: (rawItem)=> {\n    return {customStuff: true}\n  },\n  deserializer: (rawItem)=> {\n    return {customStuff: true}\n  }\n})",
  "id": 1000906,
  "order": 3,
  "stars": 0,
  "errors": [
    2304,
    1005
  ],
  "hasCode": true,
  "nondeletedLines": 14,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "var longSentence = `Transform json to csv data. The difference to my other\nmodule json2csv is json2csv-stream uses streams for transforming the incoming\ndata. The module is built with the new streaming API from Node.js v0.10.0 but\nmaintains backwards compatibility to earlier Node.js versions. Listen for\nheader and line events or pipe the data directly to a readable stream.`\n\nconst ml = require('ml-sentiment')();\nml.classify(longSentence);\n//=> 0 ... (very boring encyclopedia like text)\n\nml.classify('Rainy day but still in a good mood');\n//=> 2 ... (overall positive sentiment)",
  "id": 1351633,
  "order": 1,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 8,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "TEST=server npm test",
  "id": 368644,
  "order": 3,
  "stars": 0,
  "errors": [
    2304,
    2304,
    1005,
    2304,
    2593
  ],
  "hasCode": true,
  "nondeletedLines": 1,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "// In your card JS code.\ngetCardData: function (inputs, state, callback) {\n  if (!state.rating) {\n    // Create a view model that allows user interaction.\n    var viewModel = {\n      readonly: false\n    };\n  \n    // Pass any values you want to be accessible from the client.\n    var clientLocals = { \n      mySystemRatingId: inputs.ratingId\n    };\n  \n    callback(null, viewModel, clientLocals);\n  }\n}",
  "id": 1076155,
  "order": 0,
  "stars": 0,
  "errors": [
    1003
  ],
  "hasCode": true,
  "nondeletedLines": 11,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "Math2.decomma(\"100,000,000\") // => 100000000",
  "id": 359124,
  "order": 3,
  "stars": 0,
  "errors": [
    2552
  ],
  "hasCode": true,
  "nondeletedLines": 1,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "verify.num('12312312')",
  "id": 1109635,
  "order": 0,
  "stars": 0,
  "errors": [
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 1,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "twga({\n    id : 'UA-XXXXX-Y',\n    input : './src/index.html'\n});",
  "id": 1993675,
  "order": 2,
  "stars": 0,
  "errors": [
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 4,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "import CounterLibrary from 'react-native-counter-library';\n\n// TODO: What to do with the module?\nCounterLibrary;",
  "id": 1662760,
  "order": 0,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 2,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "import 'vue-json-viewer/style.css'",
  "id": 2062122,
  "order": 2,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 1,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "\nimport { BrowserWindow, ipcMain, ipcRenderer } from \"electron\";\nimport { PromiseTron } from \"promise-tron\";\n\n// Renderer\nconst promiseTronRenderer = new PromiseTron(ipcRenderer);\npromiseTronRenderer.send('Hi from renderer!').then(response => {\n  console.log(response); // Prints: \"Reply from ipcMain\"\n}, error => {\n  console.error(error);\n});\n\n// Main\nconst browserWindow = new BrowserWindow();\nconst promiseTronMain = new PromiseTron(ipcMain, browserWindow.webContents);\npromiseTronMain.on((request /*IpcRequest*/, replyWith /*(promiseTronReply: PromiseTronReply) => void*/) => {\n  console.log(request.data); // Prints: \"Hi from renderer!\"\n  replyWith({\n    success: 'Reply from ipcMain',\n    error: null\n  });\n});\n",
  "id": 1582714,
  "order": 0,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 17,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "$(\"[title]\").tooltipify({ position : \"right\" });",
  "id": 1184167,
  "order": 13,
  "stars": 0,
  "errors": [
    2592
  ],
  "hasCode": true,
  "nondeletedLines": 1,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "client.setAPIKey('KEY')",
  "id": 406928,
  "order": 10,
  "stars": 0,
  "errors": [
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 1,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "service.eventBus.$on('drop', (args) => {\n  console.log('drop: ' + args[0])\n})",
  "id": 2074341,
  "order": 5,
  "stars": 0,
  "errors": [
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 3,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "<Plug combinator={(store) => store.props$}>\n    {(props) => (!!props ? <MyComp {...props} /> : <Waiting />)}\n</Plug>",
  "id": 363724,
  "order": 3,
  "stars": 0,
  "errors": [
    17004,
    2304,
    17004,
    2304,
    17004,
    2304,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 3,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "import { FacebookLoginHandler } from \"nativescript-facebook-oauth\";\n\n// コールバックの処理\nconst successCallback = function(result) {\n  console.log(result.token);\n};\n\nconst cancelCallback = function() {\n  console.log(\"Login was cancelled\");\n};\n\nconst failCallback = function(error) {\n  console.log(error);\n};\n\n// ログインの処理\nconst facebookLoginHandler = new FacebookLoginHandler();\nfacebookLoginHandler.logInWithReadPermissions([\"email\"], successCallback, cancelCallback, failCallback); // Permissionsを追加 https://developers.facebook.com/docs/facebook-login/permissions",
  "id": 1401545,
  "order": 1,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 12,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "// ./widget.js\nimport mediator from './mediator'\n// импортируем лэйаут встроенного виджета\nimport EmbedLayout from 'widgetly/layouts/EmbedLayout'\n\n// декларируем виджет\nmediator.defineWidget({\n  // название виджета \n  name: 'EmbedComments',\n\n  // функция инициализации виджета\n  // этот метод должен возвращать Promise\n  // в этом методе должен отрисовывать виджет\n  initialize() {\n    // Доступные свойства на момент инициализации:\n    // this.params - параметры создания виджета\n    // this.container - контейнер виджета\n    // this.createIframe(url) - создать айфрейм, привязанный к текущему виджету\n    \n    return this.container.whenEnterViewport({ lazy: true }).then(() => {\n      this.iframe = this.createIframe(iframeUrl)\n      this.layout = new EmbedLayout({\n        spinner: '<div class=\"Spinner\" />'\n      })\n      this.layout.showLoading()\n      this.layout.addToDOM(this.container)\n      this.layout.setContent(this.iframe)\n      return this.iframe.initialize().then(() => this.layout.hideLoading())\n    })\n  }\n}, {\n  // Все методы, объявленные здесь, обоготят this\n  hide() {\n    this.layout.hide()\n  },\n\n  show() {\n    this.layout.show()\n  }\n})",
  "id": 2107860,
  "order": 2,
  "stars": 0,
  "errors": [
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 24,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "haunter.snap('.sort-bar', 'Press enter and view number of results');",
  "id": 1077082,
  "order": 1,
  "stars": 0,
  "errors": [
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 1,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "Coog\n    .app('.the-third-animate')\n    .use({\n        title: 'use animate.css',\n        message: 'Your have seen the animation theme',\n        animation: false,\n        customAnimation: 'bounceInLeft', // 使用 animate.css 动画\n    })\n    .show()",
  "id": 686173,
  "order": 8,
  "stars": 0,
  "errors": [
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 9,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "$('.editable').editable(function(value, settings) {\n    console.log(this);\n    console.log(value);\n    console.log(settings);\n    return(value);\n}, {\n    type    : 'textarea',\n    submit  : 'OK',\n});",
  "id": 1182847,
  "order": 10,
  "stars": 0,
  "errors": [
    2592
  ],
  "hasCode": true,
  "nondeletedLines": 9,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "requireContext(directory, useSubdirectories = false, regExp = /\\.js$/, fn);\n\ndirectory {String} -读取文件的路径\n\nuseSubdirectories {Boolean} -是否遍历文件的子目录\n\nregExp {RegExp} -匹配文件的正则\n\nfn {Function} -执行每次迭代回调 可选参数\n\n",
  "id": 1749810,
  "order": 0,
  "stars": 0,
  "errors": [
    2304,
    2304,
    2304,
    2552,
    2304,
    1434,
    2304,
    2304,
    1434,
    2304,
    2304,
    1434,
    2552,
    2304,
    1434,
    2304,
    2304,
    1005,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 5,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "$npm link generator-fedhipster",
  "id": 988808,
  "order": 0,
  "stars": 0,
  "errors": [
    1434,
    2304,
    1434,
    2304,
    2304,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 1,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "// components/signup-form.js\nimport Ember from 'ember';\nimport { buildValidations, validator } from 'ember-cp-validations';\n\n// ember-cp-validations model. For examples and instructions, \n// visit http://offirgolan.github.io/ember-cp-validations/\nconst Validations = buildValidations({\n  username: [\n    validator('presence', true),\n    validator('format', {\n      regex: /^[a-zA-Z0-9-$_]+$/,\n      message: 'Username may only contain letters, numbers, $ and _'\n    }),\n    validator('length', {\n      min: 1,\n      max: 39\n    })\n  ],\n\n  email: [\n    validator('presence', true),\n    validator('format', {\n      type: 'email'\n    })\n  ],\n\n  password: [\n    validator('presence', true),\n    validator('length', {\n      min: 6\n    })\n  ],\n\n  passwordConfirmation: [\n    validator('presence', true),\n    validator('confirmation', {\n      on: 'password',\n      message: 'Passwords do not match'\n    })\n  ]\n});\n\nconst SignupModel = Ember.Object.extend(Validations, {\n  username: null,\n  email: null,\n  password: null,\n  passwordConfirmation: null\n});\n\nexport default Ember.Component.extend({\n\n  session: Ember.inject.service(),\n  router: Ember.inject.service(),\n\n  signupModel: null,\n\n  init() {\n    this._super(...arguments);\n    // Owner injection is required to validate non-ember-data objects.\n    this.set('signupModel', SignupModel.create(Ember.getOwner(this).ownerInjection()));\n  },\n\n  actions: {\n    signup() {\n      const username = this.get('signupModel.username');\n      const email = this.get('signupModel.email');\n      const password = this.get('signupModel.password');\n      \n      // your signup code goes here.\n    }\n  }\n});\n",
  "id": 861011,
  "order": 1,
  "stars": 0,
  "errors": [
    2802
  ],
  "hasCode": true,
  "nondeletedLines": 56,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "console.log(new geolocation.Geolocator().__proto__)",
  "id": 282149,
  "order": 1,
  "stars": 0,
  "errors": [
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 1,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "const validator = state => {\n    const { password1, password2 } = state;\n    \n    if (password1 !== password2) {\n        return {\n            ...state,\n            errors: ['Passwords are not matching!'],\n        };\n    }\n};\n\nconst Component = () => (\n    <ViewModel initialState={{ password1: '', password2: '' }}, applyState={validator}>\n        <Bind props={[\n            { key: 'password1', publish: true },\n            { key: 'password2', publish: true },\n            'errors',\n        ]}>\n            { ({ password1, setPassword1, password2, setPassword2 }) => (\n                <Form>\n                    <PasswordInput label=\"Enter password\"\n                        value={password1}\n                        onChange={setPassword1} />\n                    \n                    <PasswordInput label=\"Confirm password\"\n                        value={password2}\n                        onChange={setPassword2} />\n                    \n                    { errors.map(error => <div>{error}</div>) }\n                </Form>\n            )}\n        </Bind>\n    </ViewModel>\n);",
  "id": 1891210,
  "order": 7,
  "stars": 0,
  "errors": [
    17004,
    2304,
    1003,
    17004,
    2304,
    17004,
    2304,
    17004,
    2304,
    17004,
    2304,
    2552,
    17004,
    2304,
    2304,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 30,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "addressTo - address of the recipient\namount - amount in xrp\nsecret - your secret",
  "id": 2135891,
  "order": 13,
  "stars": 0,
  "errors": [
    2304,
    2304,
    1005,
    2304,
    1434,
    2304,
    2304,
    2304,
    2304,
    2304,
    2304,
    2304,
    1005,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 3,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "PushNotification.localNotificationSchedule({\n  message: \"My Notification Message\", // (required)\n  date: new Date(Date.now() + (60 * 1000)), // in 60 secs\n  actions: [\"ReplyInput\"],\n  reply_placeholder_text: \"Write your response...\", // (required)\n  reply_button_text: \"Reply\" // (required)\n});",
  "id": 1678333,
  "order": 14,
  "stars": 0,
  "errors": [
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 7,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "import { LibModule } from 'personity-report';",
  "id": 1535958,
  "order": 0,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 1,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "var strongPeer = new NetShout();\n\nvar port = 1987;\n\nstrongPeer.startHosting(port, function(){\n  console.log(\"I'm ready to accept connections on port \" + port);\n});",
  "id": 401338,
  "order": 2,
  "stars": 0,
  "errors": [
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 5,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "var dymo = require('dymo');\nvar fs = require('fs');\n\n// It takes a second or two for initialization to complete.\nsetTimeout(function(){\n\n    // Gets an array of IPrinter objects (Dymo printers on the current system)\n    dymo.printers(null, function(err, printers){\n        if (err) throw err;\n        console.log(printers);\n    });\n\n    // A print object;\n    var printArgs = {\n        printer: 'DYMO LabelWriter 450 (Copy 1)',    //name of printer\n        label: 'test.label',                        //path to label\n        fields: {\n            name: 'Timmy',\n            barcode: '100360931'\n        },\n        images: {\n            photo: fs.readFileSync('face.png')\n        }\n    };\n\n    dymo.print(printArgs, function(err, res){\n        if (err) throw err;\n        console.log(\"Print job created.\");\n    });\n\n}, 2000);\n",
  "id": 822218,
  "order": 0,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 23,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "import {createStore, createMiddleware} from 'observact'\n\n// custom middleware handler will receive pre-mutation `store` and `incomingMutation` information\nconst myMiddleware = createMiddleware((store, incomingMutation) => {\n  console.log(store.get('theme')) // 'light'\n  console.log(incomingMutation.key) // 'theme'\n  console.log(incomingMutation.value) // 'dark'\n}, 'my-middleware-name')\n\nconst myStore = createStore({\n  domains: [\n    {key: 'theme', value: 'light'}\n  ],\n  middlewares: [myMiddleware]\n})\n\nmyStore.set('theme', 'dark') // will log additional information using `myMiddleware`",
  "id": 1487306,
  "order": 2,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 13,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "var VirtualMachine = require('scratch-vm');\nvar vm = new VirtualMachine();\n\n// Block events\nworkspace.addChangeListener(function(e) {\n    // Handle \"tapping\" a block\n    if (e instanceof Blockly.Events.Ui && e.element === 'click') {\n        var stackBlock = workspace.getBlockById(e.blockId).getRootBlock().id;\n        vm.runtime.toggleStack(stackBlock);\n    // Otherwise, pass along to the block listener\n    } else {\n        vm.blockListener(e);\n    }\n});\n\n// Run threads\nvm.runtime.start();",
  "id": 687208,
  "order": 0,
  "stars": 0,
  "errors": [
    2304,
    2304,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 11,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "Authorization: token <access token>",
  "id": 366211,
  "order": 0,
  "stars": 0,
  "errors": [
    2304,
    2304,
    1005,
    2304,
    1109
  ],
  "hasCode": true,
  "nondeletedLines": 1,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "import { beautify } from 'flowgen';\n\n// Make the definition human readable\nconst readableDef = beautify(generatedFlowdef);",
  "id": 950462,
  "order": 1,
  "stars": 0,
  "errors": [
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 2,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "image.hash(); // aHgG4GgoFjA",
  "id": 1220659,
  "order": 32,
  "stars": 0,
  "errors": [
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 1,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "import { pluginImport, resolve } from \"@uppercod/postcss-import\";",
  "id": 434766,
  "order": 2,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 1,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "<Col.TL.X />\n<Col.T.X />\n<Col.TR.X />\n<Col.L.X />\n<Col.C.X />\n// ...\n\n<Row.TL.X />\n<Row.T.X />\n// ...",
  "id": 1662056,
  "order": 20,
  "stars": 0,
  "errors": [
    17004,
    2657,
    2304,
    17004,
    2304,
    17004,
    2304,
    17004,
    2304,
    17004,
    2304,
    17004,
    2304,
    17004,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 7,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "width: 200",
  "id": 2144151,
  "order": 6,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 1,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "AsciiTable3.arrayFill(4, 0) // [0, 0, 0, 0]\nAsciiTable3.arrayFill(2)    // [undefined, undefined]",
  "id": 543247,
  "order": 19,
  "stars": 0,
  "errors": [
    2304,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 2,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "var levelSwitch = new structuredLog.DynamicLevelSwitch(\"info\")\nvar log = structuredLog.configure()\n    .minLevel(levelSwitch)\n    .writeTo(SeqSink({\n        url: \"http://localhost:5341\",\n        apiKey: \"API_KEY\",\n        levelSwitch: levelSwitch\n    }))\n    .create();",
  "id": 1905693,
  "order": 1,
  "stars": 0,
  "errors": [
    2552,
    2552,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 9,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "import { createStore } from \"rehox\"\n\nconst store = {\n\n  name: '李狗蛋',\n  deptName: '质检部',\n  corpName: '富土康化肥厂',\n\n  setName() {\n    this.name = '李狗蛋' + Math.random()\n    this.update()\n    /** 或者\n      this.update({ name: '李狗蛋' + Math.random() })\n    */\n  },\n\n  onChangeUserInfo() {\n    this.name = '李狗蛋' + Math.random()\n    this.deptName = '质检部' + Math.random()\n    this.corpName = '富土康化肥厂' + Math.random()\n    this.update()\n    /** 或者\n      this.update({\n        name: '李狗蛋' + Math.random(),\n        deptName: '质检部' + Math.random(),\n        corpName: '富土康化肥厂' + Math.random(),\n      })\n    */\n  },\n\n}\n\nexport default createStore(store)",
  "id": 1740151,
  "order": 0,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 27,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "const Table = require('js-tables');",
  "id": 1191945,
  "order": 0,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 1,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "var tree = new BSTree()\nconsole.log(tree.length) // 0\n\ntree.add('item')\nconsole.log(tree.length) // 1",
  "id": 631482,
  "order": 4,
  "stars": 0,
  "errors": [
    2552
  ],
  "hasCode": true,
  "nondeletedLines": 4,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "var jwt = require('restify-jwt');\n\napp.get('/protected',\n  jwt({secret: 'shhhhhhared-secret'}),\n  function(req, res) {\n    if (!req.user.admin) return res.send(401);\n    res.send(200);\n  });",
  "id": 247175,
  "order": 0,
  "stars": 0,
  "errors": [
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 7,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "pickerData = [\n    {\n        a: [\n            {\n                a1: [1, 2, 3, 4]\n            },\n            {\n                a2: [5, 6, 7, 8]\n            },\n            {\n                a3: [9, 10, 11, 12]\n            }\n        ]\n    },\n    {\n        b: [\n            {\n                b1: [11, 22, 33, 44]\n            },\n            {\n                b2: [55, 66, 77, 88]\n            },\n            {\n                b3: [99, 1010, 1111, 1212]\n            }\n        ]\n    },\n    {\n        c: [\n            {\n                c1: ['a', 'b', 'c']\n            },\n            {\n                c2: ['aa', 'bb', 'cc']\n            },\n            {\n                c3: ['aaa', 'bbb', 'ccc']\n            }\n        ]\n    },\n    ...\n]",
  "id": 1673808,
  "order": 5,
  "stars": 0,
  "errors": [
    2304,
    1109
  ],
  "hasCode": true,
  "nondeletedLines": 42,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "var bot = require(\"discord-music-bot\");\n\nvar serverName = \"Your server name here\";\nvar textChannelName = \"Your text channel name here (without #)\";\nvar voiceChannelName = \"Your voice channel name here\";\nvar aliasesFile = \"A file the bot will use to store your aliases\";\nvar botToken = \"Your bot token here\";\n\nbot.run(serverName, textChannelName, voiceChannelName, aliasesFile, botToken);",
  "id": 796745,
  "order": 0,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 7,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "grunt.loadNpmTasks('grunt-testing123');",
  "id": 1045731,
  "order": 0,
  "stars": 0,
  "errors": [
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 1,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "var data = proxel({\n    foo: 5\n});\n\nconsole.log(data); // 5\n\n// Watch for changes to data.foo\nproxel.on(data, 'foo', function(current, last){\n    console.log('Foo Handler: Was' + last + ' now ' + current);\n});\n\n// Watch for changes to data./^ba/\nproxel.on(data, /^ba/, function(current, last){\n    console.log('/bo/ Handler: Was' + last + ' now ' + current);\n});\n\ndata.foo = 10; // logs \"Was 5 now 10\"\ndata.bar = 'bar'; // logs \"Foo Handler: Was undefined now bar\"\ndata.baz = 'baz'; // logs \"/bo/ Handler: Was undefined now baz\"\n",
  "id": 1588118,
  "order": 0,
  "stars": 0,
  "errors": [
    2304,
    2304,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 13,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "mongodb",
  "id": 1431839,
  "order": 7,
  "stars": 0,
  "errors": [
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 1,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "T.isUndefined(str)",
  "id": 876871,
  "order": 2,
  "stars": 0,
  "errors": [
    2304,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 1,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "channel.on(\"debug\", msg => console.log(msg));\nchannel.on(\"info\", msg => console.log(msg));\nchannel.on(\"error\", err => console.error(err));\n\nchannel.on(\"chat\", ({ viewerId, viewerName, message }) => {});\nchannel.on(\"cheer\", ({ viewerId, viewerName, amount, message }) => {});\n// for subs/resubs/subgifts, plan === \"1000\", \"2000\", \"3000\" or \"Prime\". See msg-param-sub-plan here https://dev.twitch.tv/docs/irc/tags/#usernotice-twitch-tags\nchannel.on(\"sub\", ({ viewerId, viewerName, message, plan, planName }) => {});\nchannel.on(\"resub\", ({ viewerId, viewerName, message, months, plan, planName }) => {});\nchannel.on(\n  \"subgift\",\n  ({ viewerId, viewerName, recipientId, recipientName, plan, planName }) => {}\n);\n// you need to provide the streamlabs_socket_token option to catch \"host\" events\nchannel.on(\"host\", ({ viewerId, viewerName, viewers }) => {});\nchannel.on(\"raid\", ({ viewerId, viewerName, viewers }) => {});\nchannel.on(\"follow\", ({ viewerId, viewerName }) => {});\n// you need to make the bot moderator of the channel to catch \"ban\" events\nchannel.on(\"ban\", ({ viewerId, viewerName }) => {});\nchannel.on(\"stream-begin\", ({ game }) => {});\nchannel.on(\"stream-change-game\", ({ game }) => {});\nchannel.on(\"stream-end\", () => {});\nchannel.on(\n  \"streamlabs/donation\",\n  // viewerId provided when found from the donator name\n  ({ viewerId, viewerName, amount, currency, message }) => {}\n);",
  "id": 1995021,
  "order": 1,
  "stars": 0,
  "errors": [
    2304,
    2304,
    2304,
    2304,
    2304,
    2304,
    2304,
    2304,
    2304,
    2304,
    2304,
    2304,
    2304,
    2304,
    2304,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 22,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "const Client = require('ravencoin-core');\nconst fs = require('fs');\nconst client = new Client({\n  agentOptions: {\n    ca: fs.readFileSync('/etc/ssl/ravend/cert.pem')\n  },\n  port: 28766,\n  ssl: true\n});",
  "id": 1620136,
  "order": 23,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 9,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "stringP(\"true\")\n  .flatMap(t => ...) // Here t will be bound to the value\n                     // \"true\" in case of successful match",
  "id": 1269698,
  "order": 10,
  "stars": 0,
  "errors": [
    2552,
    1109,
    1109
  ],
  "hasCode": true,
  "nondeletedLines": 2,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "bucket.initBucket().then(function () {\n  // bucket is ready for use.....\n})",
  "id": 1881155,
  "order": 2,
  "stars": 0,
  "errors": [
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 2,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "var obj = { d: 4, b: 2, c: 3, a: 1 };\n\nobj.$sort(); // { a: 1, b: 2, c: 3, d: 4 };",
  "id": 653831,
  "order": 23,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 2,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "import Component from 'ember-mobiledoc-editor/components/mobiledoc-editor/component';\n\nexport default Component.extend({\n  cursorDidChange(editor) {\n    this._super(...arguments);\n    // custom event handling goes here\n  }\n});",
  "id": 62028,
  "order": 4,
  "stars": 0,
  "errors": [
    2802
  ],
  "hasCode": true,
  "nondeletedLines": 6,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "import isMailTo from 'is-mailto';\n\nconst string = 'mailto:test@test.com';\nconsole.log(isMailTo(string)) // true\n\nconst string = 'test@test';\nconsole.log(isMailTo(string)) // false because it's not an valid email and not contain \"mailto:\"\n",
  "id": 1152888,
  "order": 0,
  "stars": 0,
  "errors": [
    2451,
    2451
  ],
  "hasCode": true,
  "nondeletedLines": 5,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "// $ExpectType void\nf(1);\n\n// $ExpectError\nf(\"one\");",
  "id": 429165,
  "order": 0,
  "stars": 0,
  "errors": [
    2304,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 2,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "const Eris = require(\"eris\");\n\nvar bot = new Eris(\"Bot TOKEN\");\n// Replace TOKEN with your bot account's token\n\nbot.on(\"ready\", () => { // When the bot is ready\n    console.log(\"Ready!\"); // Log \"Ready!\"\n});\n\nbot.on(\"error\", (err) => {\n  console.error(err); // or your preferred logger\n});\n\nbot.on(\"messageCreate\", (msg) => { // When a message is created\n    if(msg.content === \"!ping\") { // If the message content is \"!ping\"\n        bot.createMessage(msg.channel.id, \"Pong!\");\n        // Send a message in the same channel with \"Pong!\"\n    } else if(msg.content === \"!pong\") { // Otherwise, if the message is \"!pong\"\n        bot.createMessage(msg.channel.id, \"Ping!\");\n        // Respond with \"Ping!\"\n    }\n});\n\nbot.connect(); // Get the bot to connect to Discord",
  "id": 797349,
  "order": 0,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 16,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "USAGE\n  $ jbrowse upgrade [LOCALPATH]\n\nARGUMENTS\n  LOCALPATH  [default: .] Location where JBrowse 2 is installed\n\nOPTIONS\n  -h, --help          show CLI help\n  -l, --listVersions  Lists out all versions of JBrowse 2\n\n  -t, --tag=tag       Version of JBrowse 2 to install. Format is @gmod/jbrowse-web@0.0.1.\n                      Defaults to latest\n\n  -u, --url=url       A direct URL to a JBrowse 2 release\n\nEXAMPLES\n  $ jbrowse upgrade # Upgrades current directory to latest jbrowse release\n  $ jbrowse upgrade /path/to/jbrowse2/installation\n  $ jbrowse upgrade /path/to/jbrowse2/installation --tag @gmod/jbrowse-web@0.0.1\n  $ jbrowse upgrade --listVersions # Lists out all available versions of JBrowse 2\n  $ jbrowse upgrade --url https://sample.com/jbrowse2.zip",
  "id": 156060,
  "order": 7,
  "stars": 0,
  "errors": [
    2304,
    1434,
    2592,
    1434,
    2304,
    2304,
    2304,
    2304,
    2304,
    1109,
    1128,
    1128,
    1128,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    1005,
    2304,
    2304,
    2304,
    2695,
    2304,
    2304,
    1005,
    2304,
    1434,
    2304,
    2304,
    2695,
    2304,
    2304,
    1005,
    2304,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    2695,
    2304,
    2304,
    1005,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    1005,
    2304,
    2304,
    1005,
    2304,
    1146,
    1161,
    1435,
    2304,
    1434,
    2304,
    2304,
    2695,
    2304,
    2304,
    1005,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    1434,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    1005,
    2304,
    2304,
    1434,
    2592,
    1434,
    2304,
    1434,
    2304,
    1127,
    1005,
    2304,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    2304,
    1434,
    2592,
    1434,
    2304,
    2304,
    2304,
    2304,
    2304,
    2304,
    1434,
    2592,
    1434,
    2304,
    2304,
    2304,
    2304,
    2304,
    2304,
    1005,
    2304,
    1146,
    1161,
    1434,
    2592,
    1434,
    2304,
    2304,
    1005,
    1434,
    2304,
    1127,
    1005,
    2304,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    1434,
    2592,
    1434,
    2304,
    2304,
    1005,
    2304,
    1109
  ],
  "hasCode": true,
  "nondeletedLines": 16,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "import { QueryReducer } from 'graphql-extended'\n\nexport default class ComplexityReducer implements QueryReducer<number, Object> {\n\n  public initial: number\n\n  constructor() {\n    this.initial = 0\n  }\n\n  public reduceField(parent: number, child: number): number {\n    const estimate = 1 + child\n    return parent + estimate\n  }\n\n  public reduceScalar(): number {\n    return 0\n  }\n\n  public reduceEnum(): number {\n    return 0\n  }\n\n  public reduceCtx(acc: number, ctx: Object): Object {\n    return {\n      ...ctx,\n      complexity: acc,\n    }\n  }\n}",
  "id": 1021453,
  "order": 2,
  "stars": 0,
  "errors": [
    8005,
    8009,
    8010,
    8009,
    8010,
    8010,
    8010,
    8009,
    8010,
    8009,
    8010,
    8009,
    8010,
    8010,
    8010
  ],
  "hasCode": true,
  "nondeletedLines": 23,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "const mongoose = require('mongoose');\nconst service = require('feathers-mongoose');\n\n// A module that exports your Mongoose model\nconst Model = require('./models/message');\n\n// Make Mongoose use the ES6 promise\nmongoose.Promise = global.Promise;\n\n// Connect to a local database called `feathers`\nmongoose.connect('mongodb://localhost:27017/feathers');\n\napp.use('/messages', service({ Model }));\napp.use('/messages', service({ Model, lean, id, events, paginate }));",
  "id": 924424,
  "order": 0,
  "stars": 0,
  "errors": [
    2304,
    2304,
    18004,
    18004,
    2552,
    18004
  ],
  "hasCode": true,
  "nondeletedLines": 7,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "import Marquee from 'vue-marquee-broad'\nimport 'vue-marquee-broad/dist/vue-marquee.min.css'\n<vue-marquee :content=\"'when your text is than the width of screen the txet will be a marquee'\" speed=\"speed-3\"></vue-marquee>",
  "id": 2063539,
  "order": 0,
  "stars": 0,
  "errors": [
    17004,
    1003
  ],
  "hasCode": true,
  "nondeletedLines": 3,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "var router = bogart.router();\nrouter.get('/', function(req) {\n  return bogart.cors({ framework: 'Bogart' });\n});",
  "id": 614901,
  "order": 12,
  "stars": 0,
  "errors": [
    2304,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 4,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "const NumberToWords = require('@rakibulalam/numbertowords');\n\nNumberToWords(100) // One Hundread Only\n\n// TODO: DEMONSTRATE API",
  "id": 333953,
  "order": 0,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 2,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "import React from \"react\";\nimport AddToCalendar from \"react-add-to-calendar\";\n\nclass Example extends React.Component {\n  static displayName = \"Example\";\n  state = {\n    event: {\n      title: \"Sample Event\",\n      description: \"This is the sample event provided as an example only\",\n      location: \"Portland, OR\",\n      startTime: \"2016-09-16T20:15:00-04:00\",\n      endTime: \"2016-09-16T21:45:00-04:00\"\n    }\n  };\n\n  render() {\n    return <AddToCalendar event={this.state.event} />;\n  }\n}",
  "id": 120869,
  "order": 0,
  "stars": 0,
  "errors": [
    17004
  ],
  "hasCode": true,
  "nondeletedLines": 17,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "const stripAnsiCc = require('strip-ansi-control-characters');\nconst child_process = require('child_process');\n\nconst ps = child_process.spawn('vuepress', ['dev'], {\n  env: process.env,\n  stdio: 'pipe',\n});\n\nps.stdout.pipe(stripAnsiCc.stream()).pipe(process.stdout);\nps.stderr.pipe(stripAnsiCc.stream()).pipe(process.stderr);",
  "id": 1904178,
  "order": 1,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 8,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "var iN = new Notify({\n  effect: 'flash',\n  interval: 500,\n  message: 'There is new message!',\n  audio:{\n    file: 'msg.mp4', // You can use arrays to pass sound files in multiple formats.\n  },\n  notification:{\n    title: 'Notification!', // Set notification title\n    icon: '', // Set notification icon, The default is Favicon\n    body: 'You have a new message!', // Set message content\n  }\n}).setFavicon(10).player();\n\n// The chrome notification pops up, and the parameters are not passed as default values...\niN.notify(); \n\niN.notify({\n  title: 'Notification!', // Set notification title\n  body: 'You have a new message!', // Set message content\n}); ",
  "id": 1967347,
  "order": 21,
  "stars": 0,
  "errors": [
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 18,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "\nimport { useHtmlAudio } from \"use-html-audio\";\n\nconst MyComponent = () => {\n  const player = useHtmlAudio(hookInputs);\n\n  // player.element should be included somewhere in the jsx\n  // it wont affect the UI in any way (it is a hidden <audio> element).\n  return <div>{player.element}</div>;\n};\n",
  "id": 2021090,
  "order": 0,
  "stars": 0,
  "errors": [
    2304,
    17004
  ],
  "hasCode": true,
  "nondeletedLines": 5,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "/*\n * options parameter in export functions contains the following fields:\n *     bearerToken - a one-time bearer token which can be used to invoke selected integrator.io API routes.\n *     connection - the connection object containing the connection configuration {encrypted: {...}, unencrypted: {...}}. 'encrypted' and 'unencrypted' are JSON objects which were saved on the corresponding wrapper connection.\n *     type - the export type and can have the values 'delta', 'type' or 'once'. If its not set then it should be assumed that all records need to be exported.\n *     delta - this field is set only when export type is delta. It contains a JSON object having two properties {dateField: ..., lastExecutionTime: ...}. 'dateField' is the field to be used to query\n *         records that need to be exported. lastExecutionTime (in milliseconds) is the date on which the corresponding export job was last run.\n *     once - this field is set only when export type is once and contains a JSON object having one property {booleanField: ...}. 'booleanField' is the field to be used to query\n *         records that need to be exported.\n *     test - this field is set only when export type is test and contains a JSON object having one property {limit: ...}. 'limit' is the maximum number of records that should be fetched.\n *     state - the allows to pass information between successive export calls. The state returned as part of response for previous call will be passed as is.\n *     _exportId - _id of the wrapper export.\n *     settings - the container for all integrator.io settings data for an integration (applicable only to connectors).\n *     configuration - the configuration provided for the wrapper export. Can be used to further customize the wrapper.\n *     data - this field is set only when the export is used as a pageProcessor in an orchestrated flow and contains the data that is generated by the previous pageGenerator or pageProcessors before this export is invoked.\n *\n * The function needs to call back with the following arguments:\n *     err - Error object to convey a fatal error has occurred. This will halt the export process.\n *     response - the response should contain a JSON object where following properties can be set. connectionOffline: A boolean value to specify if connection went offline during the course of the export. If set to true this will make the wrapper connection offline and stop the export process. data: An array of values where each value is a record that has been exported. errors: An array of JSON objects where each element represents error information in the format {message: 'error message', code: 'error code'} that occurred during the export. lastPage: A boolean to convey integrator.io that this is the last page of the export process. No more calls will be made once lastPage is set to true. state: An object which can be used to specify the current state of the export process that will be passed back in the next call to the wrapper function.\n */\nexports.exportFunction = function (options, callback) {\n  return callback(error, response)\n}",
  "id": 1141814,
  "order": 13,
  "stars": 0,
  "errors": [
    2552,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 23,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "arr = [{ a: 0 }, { a: 0 }];",
  "id": 1189975,
  "order": 14,
  "stars": 0,
  "errors": [
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 1,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "<input {...bind.input('fieldName', props)}/>",
  "id": 2005539,
  "order": 8,
  "stars": 0,
  "errors": [
    17004,
    2304,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 1,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "  var mongoose-default-values = require('mongoose-default-values');\n\n  Schema.plugin(mongoose-default-values, {'String': 'defaultValue'});",
  "id": 1369122,
  "order": 0,
  "stars": 0,
  "errors": [
    1005,
    1109,
    2304,
    1005,
    2304,
    18048,
    1109,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 2,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "var pos = require('moby-pos');\nconsole.log(pos.search(\"skeleton\"));",
  "id": 1354898,
  "order": 0,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 2,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "i18n-translate --project $PROJECT_ID --token $POEDITOR_TOKEN --path ./app/i18n",
  "id": 455655,
  "order": 0,
  "stars": 0,
  "errors": [
    2304,
    2304,
    1005,
    2304,
    2304,
    1005,
    2304,
    2304,
    1005,
    2304,
    1003,
    2304,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 1,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "var Hamngatan = require('hamngatan');\n\nvar hamngatan = new Hamngatan('your api key');\n\nhamntagan.get({\n    from: '2015-05-12'\n}, function(err, result) {\n    if(err) throw err;\n\n    console.log(result);\n});",
  "id": 1069205,
  "order": 0,
  "stars": 0,
  "errors": [
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 8,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "// require the module\nvar RNFS = require('react-native-fs');\n\n// create a path you want to write to\n// :warning: on iOS, you cannot write into `RNFS.MainBundlePath`,\n// but `RNFS.DocumentDirectoryPath` exists on both platforms and is writable\nvar path = RNFS.DocumentDirectoryPath + '/test.txt';\n\n// write the file\nRNFS.writeFile(path, 'Lorem ipsum dolor sit amet', 'utf8')\n  .then((success) => {\n    console.log('FILE WRITTEN!');\n  })\n  .catch((err) => {\n    console.log(err.message);\n  });\n",
  "id": 2104956,
  "order": 4,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 9,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "-- public\n   |-- content\n   |   |-- fonts\n   |   |-- images\n   `main-8e6d79da08.css\n   `main-5f17cd21a6.js\n   `vendor-d66b96f539.js",
  "id": 1051679,
  "order": 2,
  "stars": 0,
  "errors": [
    2304,
    2304,
    1109,
    2304,
    1109,
    2304,
    2357,
    1005,
    2304,
    1351,
    2304,
    1160
  ],
  "hasCode": true,
  "nondeletedLines": 7,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "require(\"file?name=[path][name].[ext]&queryname=1!./dir/file.png?__sprite__3x\")\n// => dir/file.__sprite__3x.png\n\nrequire(\"file?name=[path][name].[ext]&queryname=2!./dir/file.png?__sprite__3x\")\n// => dir/file.png?__sprite__3x",
  "id": 1391991,
  "order": 0,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 2,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "// ...bunch of code...\n// Define a subscriber:\nsubscribe('announcement', (msg) => alert(`The message is: ${msg}`))",
  "id": 1590998,
  "order": 1,
  "stars": 0,
  "errors": [
    2304,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 1,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "juiceParser.extractData('meu numero da sorte é cinquenta mil quinhentos e setenta e sete');\n\n// Returns\n{\n \"pt-br\": {\n  \"number\": [\n   {\n    \"start\": 22,\n    \"end\": 63,\n    \"match\": \"cinquenta mil quinhentos e setenta e sete\",\n    \"data\": [\n     50577\n    ]\n   }\n  ]\n }\n}",
  "id": 448875,
  "order": 2,
  "stars": 0,
  "errors": [
    2304,
    1005,
    1005
  ],
  "hasCode": true,
  "nondeletedLines": 15,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "//#if _PLATFORM==='web'\nconsole.info('【js/ts】 in web')\n//#else\nconsole.info('【js/ts】 in other')\n//#endif",
  "id": 2097171,
  "order": 0,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 2,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "import {parse} from 'tunic';\n\n// parse perlpod-style comments\nconst perlDocAst = parse('=pod\\n ... \\n=cut', {\n    blockParse: /^=pod\\n([\\s\\S]*?)\\n=cut$/m,\n    blockSplit: /(^=pod\\n[\\s\\S]*?\\n=cut$)/m,\n    tagSplit: false\n});",
  "id": 1992062,
  "order": 1,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 6,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "module.exports.render = function(colors, options) {\n\n  // colors is an object that will have one or both keys: 'light' and\n  // 'dark', each being an object with keys 'accent0' through 'accent7'\n  // and 'shade0' through 'shade7'.\n\n  // options is an object representing the original command-line args\n  // passed to themer. This allows you to add special arguments that\n  // will apply only to your template. An example of this is allowing a\n  // themer user to specify custom resolutions for rendering a wallpaper.\n\n  // This function should return an array of Promises, each Promise\n  // resolving to an object of the following structure:\n  // {\n  //   name: '<the name of the file to be written>', // can include subdirectories, too\n  //   contents: <a Buffer of the contents of the file to be written>,\n  // }\n\n};",
  "id": 1954757,
  "order": 3,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 2,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "const loadSecrets = require('cell-dna/load-secrets')\nconst _ = require('lodash') // optional dependency for your project, use whatever you like for deep copy\n\nmodule.exports = _.merge({}, loadSecrets(), {\n  port: process.env.PORT || 3001,\n  database: {\n    url: 'http://localhost:8529',\n    name: 'local-db',\n  },\n})",
  "id": 656301,
  "order": 1,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 9,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "// import the module\nimport NashRamp from \"@nash-io/ramp-widget-sdk\";\n\n// initialize the widget\nconst nashWidget = new NashRamp({\n  base: \"eur\",\n  env: \"PRODUCTION\",\n  redirect: \"https://example.com\",\n  referrer: \"MyApp\",\n  target: \"aave\",\n});\n\nnashWidget.init({\n  width: 496,\n  height: 480,\n  onClose: () => console.log(\"close!\"),\n});",
  "id": 261716,
  "order": 0,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 13,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "border-left-width: 2px;\nborder-right-width: 2px;",
  "id": 1264790,
  "order": 17,
  "stars": 0,
  "errors": [
    2304,
    2304,
    2304,
    1005,
    1351,
    2304,
    2304,
    2304,
    2304,
    1005,
    1351,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 2,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "var Contract = {\n    myProp : \"string\"\n};",
  "id": 1174437,
  "order": 3,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 3,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "var domify = require(\"domify\");",
  "id": 990026,
  "order": 6,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 1,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "  const { WARCRecord, WARCSerializer } = require(\"warcio\");\n\n  async function main() {\n\n    // First, create a warcinfo record\n    const warcVersion = \"WARC/1.1\";\n\n    const info = {\n      \"software\": \"warcio.js in node\"\n    }\n    const filename = \"sample.warc\";\n\n    const warcinfo = await WARCRecord.createWARCInfo({filename, warcVersion}, info);\n\n    const serializedWARCInfo = await WARCSerializer.serialize(warcinfo);\n\n    // Create a sample response\n    const url = \"http://example.com/\";\n    const date = \"2000-01-01T00:00:00Z\";\n    const type = \"response\";\n    const headers = {\n        \"Custom-Header\": \"somevalue\",\n        \"Content-Type\": 'text/plain; charset=\"UTF-8\"'\n    };\n\n    async function* content() {\n      // content should be a Uint8Array, so encoding if emitting astring\n      yield new TextEncoder().encode('sample content\\n');\n    }\n\n    const record = await WARCRecord.create({url, date, type, warcVersion, headers}, content());\n\n    const serializedRecord = await WARCSerializer.serialize(record);\n\n    console.log(new TextDecoder().decode(serializedWARCInfo));\n    console.log(new TextDecoder().decode(serializedRecord));\n  }\n\n  main();",
  "id": 2083154,
  "order": 6,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 25,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "const { XmlDocument }  = require('windows.data.xml.dom')\n\nconst xmlDoc = new xml.XmlDocument();\nxmlDoc.loadXml('<node>some text here</node>')",
  "id": 270658,
  "order": 3,
  "stars": 0,
  "errors": [
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 3,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "import React from 'react';\nimport logo from './logo.png'; // Tell Webpack this JS file uses this image\n\nconsole.log(logo); // /logo.84287d09.png\n\nfunction Header() {\n  // Import result is the URL of your image\n  return <img src={logo} alt=\"Logo\" />;\n}\n\nexport default Header;",
  "id": 210806,
  "order": 7,
  "stars": 0,
  "errors": [
    17004
  ],
  "hasCode": true,
  "nondeletedLines": 7,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "all([ user, messages ])\n  .mapError((errors) => {\n    const errorMessage = errors.filter(error => error !== null).join('\\n');\n    return `Something went wrong: \\n${errorMessage}`;\n  });",
  "id": 404478,
  "order": 10,
  "stars": 0,
  "errors": [
    2304,
    2304,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 5,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "var currencies = require('currency-formatter/currencies');\n// OR\nvar currencyFormatter = require('currency-formatter');\nvar currencies = currencyFormatter.currencies;",
  "id": 334774,
  "order": 3,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 3,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "Vue.use(VuePageNavigation, { router, name: 'VuePageNavigation', keyName: 'PNK' });",
  "id": 2065646,
  "order": 2,
  "stars": 0,
  "errors": [
    2304,
    2304,
    18004
  ],
  "hasCode": true,
  "nondeletedLines": 1,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "export class UserController {\n    \n  index(data) {\n    let {req, res} = data;\n  }\n    \n  show({req, response}) {\n    if (req.body.user === session.user) {\n        return response({ data: session.user });\n    }\n  \n    response({ code: 403 });\n  }\n}",
  "id": 1272016,
  "order": 14,
  "stars": 0,
  "errors": [
    2304,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 11,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "Parent(\"Hello\").to('body', 'beforeEnd');",
  "id": 897563,
  "order": 4,
  "stars": 0,
  "errors": [
    2552
  ],
  "hasCode": true,
  "nondeletedLines": 1,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "var lazy = require('lazyrequire')(require)\n\nvar esprima = lazy('esprima')\n\nsetImmediate(function () {\n  esprima(/* load it if it's not loaded */).parse()\n})",
  "id": 1257290,
  "order": 0,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 5,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "const { GenericContainer } = require(\"testcontainers\");\n\nconst container = await new GenericContainer(\"alpine\")\n  .withPrivilegedMode()\n  .start();",
  "id": 370360,
  "order": 19,
  "stars": 0,
  "errors": [
    1378
  ],
  "hasCode": true,
  "nondeletedLines": 4,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "import { Application } from 'stimulus'\nimport ImageGrid from 'stimulus-image-grid'\n\nimport { definitionsFromContext } from 'stimulus/webpack-helpers'\nconst application = Application.start()\nconst context = require.context('../controllers', true, /\\.js$/)\napplication.load(definitionsFromContext(context))\n\n// Manually register ImageGrid as a Stimulus controller\napplication.register('image-grid', ImageGrid)",
  "id": 1895174,
  "order": 0,
  "stars": 0,
  "errors": [
    2339
  ],
  "hasCode": true,
  "nondeletedLines": 7,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "/**\n* @desc: 判断参数是否是null,undefined,NaN\n* @return: boolean\n*/\nfebs.utils.isNull(e)\n/**\n* @desc: 将异步回调方式的方法转换成promise, 函数中的this可以为指定值.\n*         例如: yield denodeify(fs.exists)(path);\n* @param self: 指定的调用对象\n* @return: promise.\n*/\nfebs.utils.denodeify(fn, self, argumentCount)\n/**\n* @desc: 执行cmd (仅server端可用).\n* @param cmd: 指令.\n* @param params: 输入参数数组.\n* @param cbFinish: 完成的回调.\n*/\nfebs.utils.execCommand(cmd:string, params:string[], cbFinish:(err:any)=>void);",
  "id": 925313,
  "order": 6,
  "stars": 0,
  "errors": [
    2304,
    2304,
    2304,
    2304,
    2304,
    2304,
    2304,
    2304,
    1005,
    2693,
    2304,
    1005,
    2693,
    1011,
    2304,
    1005,
    8010,
    1109
  ],
  "hasCode": true,
  "nondeletedLines": 19,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "const lazyRedraw = throttle(redraw, 300);\nfoo.on.resize.add(lazyRedraw);\nlazyRedraw();\nsetTimeout(function(){\n    lazyRedraw();\n    \n    // lazyRedraw will be called only once since 'cancel' was called before the 'interval' for 2nd call completed\n    lazyRedraw.cancel();\n}, 250);",
  "id": 217088,
  "order": 3,
  "stars": 0,
  "errors": [
    2304,
    2304,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 7,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "const id = require('unique-identity');",
  "id": 2011796,
  "order": 1,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 1,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "const fd = await promiseReadable.once(\"open\")\npromiseReadable.stream.pipe(process.stdout)\n\nawait promiseReadable.once(\"close\")\n\npromiseReadable.stream.on(\"data\", chunk => console.log(chunk.length))\nawait promiseReadable.once(\"end\")\n\nawait promiseReadable.once(\"error\") // throws error, undefined if ended",
  "id": 1582209,
  "order": 12,
  "stars": 0,
  "errors": [
    1375,
    1378,
    2304,
    2304,
    1375,
    1378,
    2304,
    2304,
    1375,
    1378,
    2304,
    1375,
    1378,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 6,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "// 返回 [2]\nbeautyUtil.getIntersectionArray([1, 2], [2, 3]);",
  "id": 264926,
  "order": 22,
  "stars": 0,
  "errors": [
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 1,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "restarFechas ( fecha1: string, fecha2: string ): number;",
  "id": 490783,
  "order": 19,
  "stars": 0,
  "errors": [
    2304,
    2304,
    1005,
    2693,
    2304,
    1005,
    2693,
    1005,
    2693
  ],
  "hasCode": true,
  "nondeletedLines": 1,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "@Directive({\n  selector: '//some-comment'\n})",
  "id": 1418941,
  "order": 7,
  "stars": 0,
  "errors": [
    1146
  ],
  "hasCode": true,
  "nondeletedLines": 3,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "jQuery(document).ready(function($) {\n\n  $('#element').hcSticky({\n    stickTo: $('#content')[0]\n  });\n\n});",
  "id": 1078077,
  "order": 3,
  "stars": 0,
  "errors": [
    2304,
    2584
  ],
  "hasCode": true,
  "nondeletedLines": 5,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "var Omise = require('42-cent-omise');\nvar client = new Omise({\n    PUBLIC_KEY: '<PLACEHOLDER>',\n    SECRET_KEY: '<PLACEHOLDER>'\n});",
  "id": 1770,
  "order": 0,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 5,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "const options = {\n  sandbox: true,\n}",
  "id": 308431,
  "order": 7,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 3,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "import RNDraw from 'rn-draw'\n  \n<RNDraw\n  strokes={[]}\n  containerStyle={{backgroundColor: 'rgba(0,0,0,0.01)'}}\n  rewind={(undo) => {this._undo = undo}}\n  clear={(clear) => {this._clear = clear}}\n  color={'#000000'}\n  strokeWidth={4}\n  onChangeStrokes={(strokes) => console.log(strokes)}\n/>\n\n### Props\n**strokes** [Array] - set with some initial data. (defaults to [])\n\n**containerStyle** [Object] - style for the container of the draw component.\n\n**color** [String] - string representation of pen color (defaults to '#000000')\n\n**strokeWidth** [Number] - width of pen strokes (defaults to 4)\n\n**rewind** [Func] - a function for passing the draw component's undo functionality\n\n**clear** [Func] - a function for passing the draw component's clear functionality\n\n**onChangeStrokes** [Func] - callback that is called when the draw changes.\n\n  \n## Work in progress\n\nSmoothing out pen strokes (curves) \n\nImage backgrounds\n\nOptimizations in pointer\n",
  "id": 1767006,
  "order": 0,
  "stars": 0,
  "errors": [
    17004,
    2532,
    2532,
    1127,
    1127,
    1127,
    1005,
    2304,
    2304,
    2363,
    2552,
    1005,
    1101,
    1005,
    2304,
    1005,
    2304,
    1003,
    2304,
    1005,
    2304,
    1011,
    2304,
    2363,
    2304,
    1005,
    1005,
    2304,
    1005,
    2304,
    1005,
    2304,
    1005,
    2304,
    1434,
    2304,
    2304,
    1003,
    2304,
    2363,
    2693,
    1005,
    2304,
    1434,
    2304,
    1434,
    2304,
    2304,
    2304,
    1005,
    2304,
    1005,
    2304,
    2363,
    2304,
    1005,
    2304,
    1434,
    2304,
    2304,
    2304,
    1005,
    2304,
    1005,
    2304,
    2363,
    2304,
    2304,
    1005,
    1359,
    1005,
    2304,
    1005,
    2304,
    1005,
    2304,
    1005,
    1434,
    2304,
    2362,
    1002,
    2304,
    2363,
    2304,
    2304,
    1005,
    1359,
    1005,
    2304,
    1005,
    2304,
    1005,
    2304,
    1005,
    1434,
    2304,
    2362,
    1002,
    2304,
    2363,
    2304,
    2304,
    1005,
    2304,
    2304,
    1228,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    2304,
    1003,
    1127,
    1127,
    1005,
    2304,
    2304,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    2304,
    2304,
    1434,
    2304,
    2304,
    2304,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 22,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "treeTools.resolve(complexTreeWithPromises)\n    .then(tree => {...})",
  "id": 1982331,
  "order": 7,
  "stars": 0,
  "errors": [
    2304,
    2304,
    1128,
    1109
  ],
  "hasCode": true,
  "nondeletedLines": 2,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "  \nconst xLabels = new Array(24).fill(0).map((_, i) => `${i}`);  \n  \nconst yLabels = [\"Sun\", \"Mon\", \"Tue\"];  \nconst data = new Array(yLabels.length)  \n  .fill(0)  \n  .map(() =>  \n    new Array(xLabels.length).fill(0).map(() => Math.floor(Math.random() * 100))  \n  );  \n  \nReactDOM.render(  \n  <HeatMap  \n    xLabels={xLabels}  \n    yLabels={yLabels}  \n    xLabelWidth={50}  \n    data={data}  \n    squares  \n    onClick={(x, y) => alert(`Clicked ${x}, ${y}`)}  \n    cellStyle={(background, value, min, max, data, x, y) => ({  \n      background: `rgb(66, 86, 244, ${1 - (max - value) / (max - min)})`,  \n      fontSize: \"11px\",  \n    })}  \n    cellRender={value => value && `${value}%`}  \n  />,  \n  document.getElementById(\"app\")  \n);  ",
  "id": 1651923,
  "order": 1,
  "stars": 0,
  "errors": [
    2304,
    17004,
    2304,
    2304,
    2584
  ],
  "hasCode": true,
  "nondeletedLines": 23,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "Usage\n  $ yarn add-component <input>\n\nOptions\n  --atomic, -a  Atomic type of component\n\nExamples\n  $ yarn add-component \"My Component\" --atomic atoms",
  "id": 129320,
  "order": 0,
  "stars": 0,
  "errors": [
    2304,
    1434,
    2592,
    1434,
    2304,
    2304,
    2304,
    2304,
    2304,
    2552,
    2304,
    1005,
    2552,
    8008,
    1005,
    2304,
    2304,
    1434,
    2592,
    1434,
    2304,
    2304,
    2304,
    1005,
    2356,
    1005,
    2304,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 6,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "var isHexColor = require( 'validate.io-color-hexadecimal' );",
  "id": 2031058,
  "order": 0,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 1,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "import React, { Component } from 'react';\n\nclass Button extends Component {\n  render() {\n    // ...\n  }\n}\n\nexport default Button; // Don’t forget to use export default!",
  "id": 26421,
  "order": 1,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 6,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "var users={\n    name:'Kulas Light',\n    age:'25'\n};\n\nfetch.delete('/users/:id').then(res => console.log(res));",
  "id": 1261706,
  "order": 4,
  "stars": 0,
  "errors": [
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 5,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "function myCondition(obj, callback) {\n    //Do something after the transition\n    return callback(null);  \n    }\n});",
  "id": 1738051,
  "order": 2,
  "stars": 0,
  "errors": [
    1128,
    1128
  ],
  "hasCode": true,
  "nondeletedLines": 4,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "// Lodash\nvar result = _.startsWith('abc', 'b', 1)\nconsole.log(result)\n// output: true\n\n// Native\nvar result = 'abc'.startsWith('b', 1)\nconsole.log(result)\n// output: true",
  "id": 884796,
  "order": 76,
  "stars": 0,
  "errors": [
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 4,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "const NumberToRoman = require('convert_to_roman')\n\nconsole.log(NumberToRoman(1453))\nresult ' MCDLIII   '",
  "id": 713711,
  "order": 0,
  "stars": 0,
  "errors": [
    1434,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 3,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "const id = generator()",
  "id": 228167,
  "order": 2,
  "stars": 0,
  "errors": [
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 1,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "// Pseudo code\nlet db = require('mongoose').createConnection('mongodb://localhost/forum');\n\nfunction lastPosts(limit) {\n  return db.model('Post').find().limit(limit).orderBy('-_id').lean(true).exec(); // <- Promise\n}\n\nlet cachedLastPosts = require('promise-memoize')(lastPosts, { maxAge: 60000 });\n\n// Later...\ncachedLastPosts(10).then(posts => console.log(posts));",
  "id": 1581747,
  "order": 0,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 6,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "import cmiotComponents from 'cmiot-components';\n\n// TODO: DEMONSTRATE API",
  "id": 684694,
  "order": 0,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 1,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "import {tinycolor} from '@thebespokepixel/es-tinycolor'\n\nconst color = tinycolor(\"red\")\n\ncolor.toRgbString() // \"rgba(255, 0, 0, 0.5)\"",
  "id": 401415,
  "order": 0,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 3,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "import {bigAndPadded} from './common';\n\nexport default {\n  button: {\n    ...bigAndPadded,\n    border: '5px solid black'\n  }\n};",
  "id": 2012241,
  "order": 4,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 7,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "\nconst Server = require('amqplib-rpc/Server');\n//or\nconst Server = require('amqplib-rpc').Server;\n\nconst server = new Server({queue: \"test\"});\n\nserver.bind('method', (params, callback) => {\n    //Do something\n    callback(err, result);//Return result or error\n});\n\n//If you need verify params for correct, use schema json\nserver.bindSchema('method', {/*schema*/})\n\nserver.run()\n    .then(function(res) {\n        //Should return true\n    })\n    .catch(function(err) {\n        //Return \"Error\" if server not started\n    });\n",
  "id": 506018,
  "order": 0,
  "stars": 0,
  "errors": [
    2300,
    2300,
    2304,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 12,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "this.player.seek(200); // Seek to 3 minutes, 20 seconds",
  "id": 217744,
  "order": 24,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 1,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "USAGE\n  $ tomcli help [COMMAND]\n\nARGUMENTS\n  COMMAND  command to show help for\n\nOPTIONS\n  --all  see all commands in CLI",
  "id": 407466,
  "order": 2,
  "stars": 0,
  "errors": [
    2304,
    1434,
    2592,
    1434,
    2304,
    2304,
    2304,
    2304,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    1005,
    2304,
    1005,
    2304,
    1005,
    2304,
    1005,
    2304,
    2304,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 6,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "waterwheel.api['user'].get(1)\n  .then(res => {\n    // Drupal JSON Object\n  })\n  .catch(err => {\n    // err\n  });",
  "id": 2085220,
  "order": 4,
  "stars": 0,
  "errors": [
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 5,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "console.log(new geolocation.Geolocator().__proto__)",
  "id": 275210,
  "order": 1,
  "stars": 0,
  "errors": [
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 1,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "action = {\n  type: 'member-join',\n  peerId: 'peerId-of-the-new-joiner'\n}",
  "id": 1857994,
  "order": 0,
  "stars": 0,
  "errors": [
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 4,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "const fs = require(\"fs\");\nconst yaml = require(\"js-yaml\");\nconst elbow = require(\"elbow\");\n\nrequire.extensions[\".yml\"] = function(mod, filename) {\n  mod.exports = yaml.safeLoad(fs.readFileSync(filename, \"utf8\"));\n};\n\ndescribe(\"using yaml\", function() {\n  elbow.run(it, \"http://localhost:8080\", path.join(__dirname, \"example\"), {\n    extensions: [\"yml\"],\n  });\n});",
  "id": 844838,
  "order": 2,
  "stars": 0,
  "errors": [
    2593,
    2593,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 11,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "SpeechAndroid.ARABIC_EGYPT",
  "id": 1657387,
  "order": 21,
  "stars": 0,
  "errors": [
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 1,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "import React, { Component } from \"react\";\nimport { Text, View } from \"react-native\";\nimport { Model, ELgxSortDirection, ILgxResponse } from \"lgx-axios-dev-tools\";\n\nclass BaseModel extends Model {\n  public baseUrl() {\n    return \"http://localhost:3000\";\n  }\n}\n\nclass Product extends BaseModel {\n  public resource = \"products\";\n}\n\nclass App extends Component {\n  public page = 1;\n  public perPage = 10;\n  state = {\n    products: []\n  };\n\n  componentDidMount() {\n    this.loadProducts();\n  }\n\n  public async loadProducts() {\n    const resp: ILgxResponse = await Product.page(this.page)\n      .perPage(this.perPage)\n      .orderBy(\"updateAt\", ELgxSortDirection.DESC)\n      .find();\n\n    // http://localhost:3000/products?orderBy=-updatedAt&page=1&per_page=10\n\n    this.setState({\n      products: resp.data\n    });\n  }\n\n  render() {\n    return (\n      <View>\n        <Text>{/* Table */}</Text>\n      </View>\n    );\n  }\n}\n\nexport default App;",
  "id": 1267671,
  "order": 27,
  "stars": 0,
  "errors": [
    8009,
    8009,
    8009,
    8009,
    8009,
    8010,
    2339,
    2339,
    17004,
    17004
  ],
  "hasCode": true,
  "nondeletedLines": 38,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "const isCollapsed = node.meta( 'collapsed' )",
  "id": 682,
  "order": 38,
  "stars": 0,
  "errors": [
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 1,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "import { Camera } from '@ionic-native/camera';\n\ndocument.addEventListener('deviceready', () => {\n  Camera.getPicture()\n    .then(data => console.log('Took a picture!', data))\n    .catch(e => console.log('Error occurred while taking a picture', e));\n});",
  "id": 185633,
  "order": 0,
  "stars": 0,
  "errors": [
    2584
  ],
  "hasCode": true,
  "nondeletedLines": 6,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "import * as Sentry from '@sentry/node'\nexport function noop() {\n    try {\n        return nonexistent\n    } catch (ignore) {\n        // console.log(ignore);\n\n        Sentry.captureException(ignore)\n    }\n}\nexport function bar() {\n    return fetch('https://google.com')\n        .json()\n        .then(console.log)\n        .catch(function (_e) {\n            Sentry.captureException(_e)\n        })\n}\nexport function baz() {\n    return fetch('https://google.com')\n        .json()\n        .then(console.log)\n        .catch((e) => {\n            Sentry.captureException(e)\n            console.error(e)\n        })\n}",
  "id": 570358,
  "order": 1,
  "stars": 0,
  "errors": [
    2304,
    2304,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 25,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "\n'use strict';\n\nvar gulp = require('gulp'),\n    sassLint = require('gulp-sass-lint');\n\ngulp.task('default', function () {\n  return gulp.src('sass/**/*.s+(a|c)ss')\n    .pipe(sassLint({\n      options: {\n        'merge-default-rules': false\n      },\n      files: {ignore: '**/*.scss'},\n      rules: {\n        'no-ids': 1,\n        'no-mergeable-selectors': 0\n      },\n      configFile: 'config/other/.sass-lint.yml'\n    }))\n    .pipe(sassLint.format())\n    .pipe(sassLint.failOnError())\n});\n",
  "id": 1061442,
  "order": 1,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 19,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "var express    = require('express');\nvar bodyParser = require('body-parser')\nvar hipchatSpy = require('hipchat-spy');\n\nvar app = express();\napp.use(bodyParser());",
  "id": 1087456,
  "order": 0,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 5,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "// listen\nvm.cfg({\n    onemit: {\n        myEvent: function(arg1, arg2, vm, data) {\n            // ... do stuff\n        }\n    }\n});\n\n// trigger\nvm.emit(\"myEvent\", arg1, arg2);",
  "id": 809540,
  "order": 22,
  "stars": 0,
  "errors": [
    2304,
    2304,
    2304,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 7,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "var bitcoin = require('bitcoinjs-lib')",
  "id": 82177,
  "order": 0,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 1,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "translate.setSeparator('*') // => '.' (returns the previous separator)",
  "id": 734913,
  "order": 5,
  "stars": 0,
  "errors": [
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 1,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "vattenfall-design-system/\n└── dist/\n    ├── css/\n    │   ├── reboot.css\n    │   ├── reboot.css.map\n    │   ├── reboot.min.css\n    │   ├── reboot.min.css.map\n    │   ├── main.css\n    │   ├── main.css.map\n    │   ├── main.min.css\n    │   └── main.min.css.map",
  "id": 288373,
  "order": 0,
  "stars": 0,
  "errors": [
    2304,
    2304,
    2304,
    1127,
    1127,
    1127,
    2304,
    1127,
    1127,
    1127,
    2304,
    1127,
    1127,
    1127,
    1127,
    2304,
    1127,
    1127,
    1127,
    1127,
    2304,
    1127,
    1127,
    1127,
    1127,
    2304,
    1127,
    1127,
    1127,
    1127,
    2304,
    1127,
    1127,
    1127,
    1127,
    2304,
    1127,
    1127,
    1127,
    1127,
    2304,
    1127,
    1127,
    1127,
    1127,
    2304,
    1127,
    1127,
    1127,
    1127,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 11,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "const ReactDevToolsIFramePlugin = require('react-dev-tools-iframe-webpack-plugin');\n\nmodule.exports = {\n  // ..\n  plugins: [new ReactDevToolsIFramePlugin()]\n};",
  "id": 1638178,
  "order": 0,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 4,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "import React, { Component, createRef } from 'react'\nimport * as $stat from '@jafish/stat'\n\nexport default class StatBox extends Component {\n    constructor({ stat }) {\n        super()\n\n        this.box = createRef()\n    }\n\n    componentDidMount() {\n        const { stat } = this.props\n\n        $stat.onElement(this.box.current, stat)\n    }\n\n    componentWillUnmount() {\n        $stat.removeElement(this.box.current)\n    }\n\n    render() {\n        const { children } = this.props\n\n        return (\n            <div ref={this.box}>\n                {children}\n            </div>\n        )\n    }\n}\n\n// 使用\n<StatBox stat={{ target: 'box' }}>\n    xxx\n</StatBox>",
  "id": 194426,
  "order": 2,
  "stars": 0,
  "errors": [
    2339,
    2339,
    17004,
    17004
  ],
  "hasCode": true,
  "nondeletedLines": 26,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "  import {MaterializeAction} from 'angular2-materialize';\n  //...\n  modalActions = new EventEmitter<string|MaterializeAction>();\n  openModal() {\n    this.modalActions.emit({action:\"modal\",params:['open']});\n  }\n  closeModal() {\n    this.modalActions.emit({action:\"modal\",params:['close']});\n  }",
  "id": 265250,
  "order": 2,
  "stars": 0,
  "errors": [
    2304,
    2447,
    2304,
    2693,
    1109,
    2304,
    1005,
    2532,
    2304,
    1005,
    2532
  ],
  "hasCode": true,
  "nondeletedLines": 8,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "require('./lib/agenda.js');",
  "id": 930379,
  "order": 57,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 1,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "module.exports.handler = (event, context, callback) => {\n    callback(null, event);\n}",
  "id": 1251282,
  "order": 4,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 3,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "var gulp = require('gulp'),\n    apidoc = require('gulp-apidoc');\n\ngulp.task('apidoc',function(done){\n              apidoc({\n                  src: \"example/\",\n                  dest: \"build/\",\n                  template: \"template/\",\n                  debug: true,\n                  includeFilters: [ \".*\\\\.js$\" ]\n              },done);\n});",
  "id": 1050702,
  "order": 2,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 11,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "options.transforms = {\n    txt: (source, metadata) => source\n};",
  "id": 700221,
  "order": 2,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 3,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "var OpenfiscaAPI = require('gouv-national-address-api');\n\nvar Openfisca = new OpenfiscaAPI();\n\nOpenFisca.entities(null, function(error, result) {\n  console.log(error, result);\n});\n\nOpenFisca.calculate({/* Your data */}, function(error, result) {\n  console.log(error, result);\n});",
  "id": 1017100,
  "order": 0,
  "stars": 0,
  "errors": [
    2552,
    2552
  ],
  "hasCode": true,
  "nondeletedLines": 8,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "const test = require('tape');\n\ntest('equality test', function (t) {\n  t.plan(1);\n  t.equal(1, 1);\n});",
  "id": 628119,
  "order": 0,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 5,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "# Go to the module's folder (where package.json is located)\ncd fbt-runtime/\n# or\n# cd packages/babel-plugin-fbt/\n# cd packages/babel-plugin-runtime/\n\n# publishes to npm and push new git tag to Github\nyarn publish_to_npm_latest",
  "id": 922688,
  "order": 1,
  "stars": 0,
  "errors": [
    1127,
    1005,
    2304,
    1434,
    2304,
    1434,
    2304,
    8006,
    1002,
    1434,
    2304,
    2304,
    2304,
    1127,
    1005,
    2304,
    1127,
    1005,
    2304,
    2304,
    2304,
    2304,
    2304,
    1127,
    1005,
    2304,
    2304,
    2304,
    2304,
    2304,
    1127,
    1005,
    2304,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    2304,
    1005,
    2304,
    1434,
    2304,
    2304,
    1434,
    2304,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 7,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "console.log(new geolocation.Geolocator().__proto__)",
  "id": 285481,
  "order": 1,
  "stars": 0,
  "errors": [
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 1,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "module.exports = function (MyModel) {\n  MyModel.jsonApiDeserialize = function (options, callback) {\n    // either return an error\n    var err = new Error('Unable to deserialize record');\n    err.status = 500;\n    cb(err)\n\n    // or\n    // options.data is the raw data\n    // options.result needs to be populated with deserialization result\n    options.result = options.data.data.attributes;\n\n    cb(null, options);\n  }\n}",
  "id": 1291511,
  "order": 5,
  "stars": 0,
  "errors": [
    2339,
    2304,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 9,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "\nangular\n    .module('SomeModule', ['ui-select-infinity'])\n    .controller('SomeCtrl', function ($scope, $q) {\n        var loadingItem = {type: 'loading'},\n            hasNextChunk = true,\n            queryString = '';\n            \n        function getInfinityScrollChunk(id) {\n            //implement your lazy data request here\n        }\n            \n        function addLoadingStateItem() {\n            $scope.collections.push(loadingItem);\n        }\n\n        function removeLoadingStateItem() {\n            var index = $scope.collections.indexOf(loadingItem);\n            if (index < 0) {\n                return;\n            }\n            \n            $scope.collections.splice(index, 1);\n        }\n        \n        \n        $scope.isItemMatch = function($select) {\n            //implement your match function here by $select.search   \n        };\n            \n        $scope.requestMoreItems = function() {\n            if ($scope.isRequestMoreItems || !hasNextChunk) {\n                return $q.reject();\n            }\n\n            addLoadingStateItem();\n            \n            $scope.isRequestMoreItems = true;\n            return getInfinityScrollChunk(nextChunkId)\n                .then(function(newItems) {\n                    nextChunkId = newItems.nextId;\n                    $scope.items = $scope.items.concat($scope.newItems.items);\n                    return newItems;\n                }, function(err) {\n                    return $q.reject(err);\n                })\n                .finally(function() {\n                    removeLoadingStateItem();\n                    $scope.isRequestMoreItems = false;\n                });\n        };\n        \n        $scope.refreshList = function() {\n            queryString = query;\n        };\n    });\n",
  "id": 2005942,
  "order": 0,
  "stars": 0,
  "errors": [
    2304,
    2304,
    2339,
    2304,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 43,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "import {\n  getVirtualScrollerState,\n  setVirtualScrollerState\n} from './globalState'\n\nclass Example extends React.Component {\n  componentWillUnmount() {\n    saveVirtualScrollerState(this.virtualScrollerState)\n  }\n  render() {\n    return (\n      <VirtualScroller\n        items={...}\n        itemComponent={...}\n        state={hasUserNavigatedBack ? getVirtualScrollerState() : undefined}\n        onStateChange={state => this.virtualScrollerState = state}/>\n    )\n  }\n}",
  "id": 182781,
  "order": 4,
  "stars": 0,
  "errors": [
    2304,
    2552,
    17004,
    2304,
    2609,
    1109,
    2609,
    1109,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 18,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "Loadable({\n  loader: () => import('./components/Bar'),\n  loading: Loading,\n  delay: 300, // 0.3 seconds\n});",
  "id": 1765434,
  "order": 7,
  "stars": 0,
  "errors": [
    2304,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 5,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "import {url} from 'element-ext';\n\nurl.getUriParam('username', 'http://www.baidu.com?username=chenzw');  // => chenzw",
  "id": 303151,
  "order": 4,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 2,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "//import in any file you want colored messages\nimport console from 'consolomatic'\n\n//use like normal\nconsole.log('A log message');\nconsole.info('An info message');\nconsole.warn('A warning message');\nconsole.error('An error message');",
  "id": 710127,
  "order": 0,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 5,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "import nthCheck, { parse, compile } from \"nth-check\";",
  "id": 1476303,
  "order": 0,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 1,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "    createLogger(alt, {\n        predicate: (action) => action.type === USER_ACTION\n    });",
  "id": 501785,
  "order": 3,
  "stars": 0,
  "errors": [
    2304,
    2304,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 3,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "// use the EhEvent.fromInstance instantiator to use a simple object as an event template\nconst eventChangeColor = EhEvent.fromInstance({ color: \"\" });\n\nclass Picker extends Component {\n  constructor(props) {\n    super(props);\n\n    // create event-firing-functions (\"cannons\") for buttons\n    this.cannonPickBlue = () => eventChangeColor.fire({ color: \"blue\" });\n    this.cannonPickRed = () => eventChangeColor.fire({ color: \"red\" });\n  }\n\n  render() {\n    return (\n      <div className=\"picker\">\n        <button onClick={this.cannonPickBlue}>Blue</button>\n        <button onClick={this.cannonPickRed}>Red</button>\n      </div>\n    );\n  }\n}\n\nclass ColorDisplay extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { color: \"yellow\" };\n\n    // register a handler that updates state\n    eventChangeColor.register(({ color }) => this.setState({ color }));\n  }\n\n  render() {\n    return (\n      <div className=\"display\" style={{ backgroundColor: this.state.color }} />\n    );\n  }\n}",
  "id": 145130,
  "order": 6,
  "stars": 0,
  "errors": [
    2552,
    2304,
    17004,
    17004,
    17004,
    2304,
    2339,
    17004
  ],
  "hasCode": true,
  "nondeletedLines": 28,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "cargo generate --git https://github.com/rustwasm/wasm-pack-template.git --name my-project\ncd my-project",
  "id": 155201,
  "order": 0,
  "stars": 0,
  "errors": [
    1434,
    2304,
    2304,
    1005,
    2304,
    1434,
    2304,
    2304,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 2,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "var Postmark = require('postmark-tracking');\nvar tracker = new Postmark('xxx-xxx-xxx-xxx') //Postmark token\n\ntracker.search('my-message-id-xxx', function(err, resp) {\n    console.log(err, resp);\n});\n",
  "id": 1568019,
  "order": 0,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 5,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "const Prismic = require('@prismicio/client');\n\nconst options = {\n  // see specifications below\n}\nconst client = Prismic.client(\"http://your_repository_name.cdn.prismic.io/api\", options)",
  "id": 324107,
  "order": 2,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 4,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "graph.link(a, b)\n\ngraph.from(a) // Set of nodes connected from a\ngraph.from(a).size // => 1\ngraph.from(a).has(b) // => true\n\n\ngraph.to(b) // Set of nodes connected to b\ngraph.to(b).has(a) // => true\ngraph.from(b).size // => 0",
  "id": 1023515,
  "order": 3,
  "stars": 0,
  "errors": [
    2304,
    2304,
    2304,
    2304,
    2304,
    2304,
    2304,
    2304,
    2304,
    2304,
    2304,
    2304,
    2304,
    2304,
    2304,
    2304,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 7,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "const wayland = require('wayland')\n\nconst app = wayland.makeApp({\n  host: 'localhost',\n  port: 3000,\n  protopath: 'hello.proto',\n  services: {\n    HelloService: {\n      greet: (_, cb) => cb(null, { text: 'hello' })\n    },\n  },\n})\n\napp.start() // > Server running at localhost:3000\n// or overwite the host, port, or app name\napp.start({\n  name: 'welund',\n  host: '127.0.0.1',\n  port: 3001,\n}) // > welund running at 127.0.0.1:3001\n\nconst client = wayland.makeClient({\n  host: 'localhost',\n  port: 3000,\n  protopath: 'hello.proto',\n  service: 'HelloService',\n})\n\nclient.greet({}, (err, greeting) => {\n  // => ({ text: 'hello' })\n})",
  "id": 2086567,
  "order": 0,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 25,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "grunt.initConfig({\n  \"file2head\":{\n    options:{\n        scanSourceFileDir: 'app',\n        scanDistFileDir: 'app',\n        dist: 'index.html',\n        tag: \"head\",\n        uri: \"http://xxx.com\"\n    },\n    js:{\n      src: ['lib/*.js', '*.js'],\n      tag: \"#hello\"\n    },\n    css:{\n      src: ['css/*.css']\n      uri: \"http://www.com\"\n    },\n    clear:{\n      tasks: ['js']\n    }\n  }\n})",
  "id": 1235061,
  "order": 8,
  "stars": 0,
  "errors": [
    2304,
    1005
  ],
  "hasCode": true,
  "nondeletedLines": 22,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "var benz = require('benz')",
  "id": 594617,
  "order": 0,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 1,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "var openCLBuffer = new CLBuffer(\n    context,\n    host.cl.defs.CL_MEM_ALLOC_HOST_PTR,\n    size_in_bytes_here);",
  "id": 1468237,
  "order": 10,
  "stars": 0,
  "errors": [
    2552,
    2304,
    2304,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 4,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "const PM2IO = require('@pm2/js-api')\n\nlet io = new PM2IO({\n  services: {\n    API: 'http://cl1.km.io:3000',\n    OAUTH: 'http://cl1.km.io:3100'\n  }\n}).use('standalone', {\n  refresh_token: 'refresh-token'\n})",
  "id": 1229821,
  "order": 6,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 9,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "example:\nsm -f ./demo/dist/app.min.js.map -l 1 -c 1023\n\noutput:\n★sourceFilePath: webpack:///main.js\n★line: 8\n★column: 14\n★name: aaa\n--------start 错误代码--------\nfunction test2 () {\n  console.log('test2')\n}\nfunction testError () {\n*  console.log(aaa)\n}\nfunction test3 () {\n  console.log('test3')\n}\nfunction test4 () {\n\n--------end 错误代码--------\n",
  "id": 1110062,
  "order": 0,
  "stars": 0,
  "errors": [
    2304,
    2304,
    1003,
    2304,
    2304,
    2304,
    2304,
    1005,
    2304,
    1005,
    1127,
    1127,
    1127,
    1127,
    2304,
    1109,
    1109,
    1109,
    2304,
    1005,
    2304,
    1005,
    1109,
    1109,
    2356,
    1109,
    2363,
    2304,
    1109,
    1109,
    1109,
    2304,
    1005,
    2304,
    1005,
    1109,
    1109,
    1109,
    1005
  ],
  "hasCode": true,
  "nondeletedLines": 19,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "/             - static server returns index.html with React app\n/todos        - static server returns index.html with React app\n/api/todos    - server handles any /api/* requests using the backend implementation",
  "id": 1586132,
  "order": 16,
  "stars": 0,
  "errors": [
    2362,
    1161,
    2304,
    2304,
    1005,
    2304,
    1435,
    2304,
    2304,
    1005,
    1005,
    2304,
    1005,
    1005,
    2304,
    2693,
    2304,
    1010
  ],
  "hasCode": true,
  "nondeletedLines": 3,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "var Profile = new SchemaObject({\n  id: {\n    type: String,\n    required: true\n}, {\n  allowFalsyValues: true\n});\n\nvar profile = new Profile();\nprofile.id = '';\n\nconsole.log(profile.getErrors());\n// Prints:\n[]",
  "id": 1455363,
  "order": 17,
  "stars": 0,
  "errors": [
    2304,
    1136
  ],
  "hasCode": true,
  "nondeletedLines": 11,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "if (InCallManager.recordPermission !== 'granted') {\n    InCallManager.requestRecordPermission()\n    .then((requestedRecordPermissionResult) => {\n        console.log(\"InCallManager.requestRecordPermission() requestedRecordPermissionResult: \", requestedRecordPermissionResult);\n    })\n    .catch((err) => {\n        console.log(\"InCallManager.requestRecordPermission() catch: \", err);\n    });\n}",
  "id": 1577543,
  "order": 8,
  "stars": 0,
  "errors": [
    2304,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 9,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "// setup\n\nexport const typeDefs = [`type Query{\n  testString:String\n}\nschema{\n  query:Query\n}\n`];\n\nexport const resolvers = {\n  Query: {\n    testString () {\n      'use strict';\n      return 'this is a test string';\n    }\n  }\n};\n\nconst Opts={path:'/graphql',schema,resolvers} //makeExecutable schema options\nconst extraOpts={context:{key:\"context_Value\"}} // graphql server options: \n\n// Register the plugin, see below for an example\napp.configure(graphqlService(Opts,extraOpts));\n",
  "id": 924023,
  "order": 1,
  "stars": 0,
  "errors": [
    18004,
    2304,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 18,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "var main = hotbox.state('main');",
  "id": 1094410,
  "order": 2,
  "stars": 0,
  "errors": [
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 1,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "var secureRedirects = require('secure-redirects');\n\n// Redirect to https://twitter.com if bad redirect is encountered\nvar options = {\n    redirectUrl: 'https://twitter.com'\n};\n\napp.use(secureRedirects(options));",
  "id": 1810998,
  "order": 3,
  "stars": 0,
  "errors": [
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 5,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "REACT_APP_SECRET_CODE=abcdef",
  "id": 1618009,
  "order": 13,
  "stars": 0,
  "errors": [
    2304,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 1,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "// ES Modules\nimport parse from 'html-dom-parser';\n\n// CommonJS\nconst parse = require('html-dom-parser');",
  "id": 1097225,
  "order": 2,
  "stars": 0,
  "errors": [
    2300,
    2300
  ],
  "hasCode": true,
  "nondeletedLines": 2,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "function main(){\n\n  // your code\n\n}\n\nmain(); // remove this from your bundled output",
  "id": 150305,
  "order": 1,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 3,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "ng add angular-auth-oidc-client",
  "id": 508625,
  "order": 0,
  "stars": 0,
  "errors": [
    1434,
    2304,
    1434,
    2304,
    2304,
    2304,
    2304,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 1,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "const { kasiaReducer, kasiaSagas } = kasia({\n  wpapi: new wpapi({ endpoint: 'http://wordpress/wp-json' })\n})",
  "id": 1225443,
  "order": 4,
  "stars": 0,
  "errors": [
    2304,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 3,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "Seemple.initRouter(this, '/x/*/');",
  "id": 1812089,
  "order": 9,
  "stars": 0,
  "errors": [
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 1,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "function links(graph) {\n  return graph.links;\n}",
  "id": 319045,
  "order": 1,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 3,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "var sassMap = require('sass-map');",
  "id": 789294,
  "order": 1,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 1,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "// cosmos.config.js\nmodule.exports = {\n  webpackConfigPath: './config/webpack.config.dev.js'\n};",
  "id": 1634211,
  "order": 36,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 3,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "const visitor = createVisitor({\n  object(schema, callback) {\n    callback(schema)\n    Object.keys(schema.properties)\n      .map(key => schema.properties[key])\n      .forEach(childSchema => visitor(childSchema, callback))\n  }\n  array(schema, callback) {\n    callback(schema)\n    visitor(schema.items, callback)\n  },\n  allOf(schema, callback) {\n    callback(schema)\n    schema.allOf.forEach(childSchema => visitor(childSchema, callback))\n  },\n  anyOf(schema, callback) {\n    callback(schema)\n    schema.anyOf.forEach(childSchema => visitor(childSchema, callback))\n  },\n  oneOf(schema, callback) {\n    callback(schema)\n    schema.oneOf.forEach(childSchema => visitor(childSchema, callback))\n  }\n  any(schema, callback) {\n    callback(schema)\n  }\n})\n\nvisitor(someSchema, schema => console.log(schema))",
  "id": 1201720,
  "order": 3,
  "stars": 0,
  "errors": [
    2304,
    1005,
    1005,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 28,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "// Called when a connection is established to the server\nNoDevent.on('connect', function(){});\n\n// Called when disconnected from the server\nNoDevent.on('disconnect', function(){});",
  "id": 1466258,
  "order": 4,
  "stars": 0,
  "errors": [
    2304,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 2,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "matrix.startPulsate();",
  "id": 793540,
  "order": 1,
  "stars": 0,
  "errors": [
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 1,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "module.exports = require('prfun/wrap')(require('babybird'));",
  "id": 577672,
  "order": 1,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 1,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "\"git checkout master\",\n\"git tag -a 0.1.0 -m v0.1.0\",\n\"git push\",\n\"git push --tags\",\n\"git status\"",
  "id": 1123156,
  "order": 0,
  "stars": 0,
  "errors": [
    2695,
    2695,
    2695,
    2695
  ],
  "hasCode": true,
  "nondeletedLines": 5,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "<dile-input\n  name=\"name\"\n  label=\"Name\"\n  value=\"John\"\n></dile-input>",
  "id": 108340,
  "order": 2,
  "stars": 0,
  "errors": [
    17004
  ],
  "hasCode": true,
  "nondeletedLines": 5,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "ipso = require('ipso');\n\nit('does something', ipso(  function(done) {\n  \n  done();\n\n}  ));\n",
  "id": 1150038,
  "order": 0,
  "stars": 0,
  "errors": [
    2304,
    2593,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 4,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "module.exports = {\n  HELLO: 'Hallo'\n}",
  "id": 884594,
  "order": 0,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 3,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "disqueue.working( <job-id>, callback );",
  "id": 798869,
  "order": 15,
  "stars": 0,
  "errors": [
    2304,
    17004,
    17008,
    1005
  ],
  "hasCode": true,
  "nondeletedLines": 1,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "import 'performancenow';",
  "id": 1534561,
  "order": 0,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 1,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "<el-date-picker-second\n  v-model=\"begin_time\">\n</el-date-picker-second>\n\ndata : {\n  begin_time : 1590724163,\n}\n\n其它 props:\ntype : \"datetime\"\nplaceholder : \"选择时间\"",
  "id": 849192,
  "order": 3,
  "stars": 0,
  "errors": [
    17004,
    2695,
    1109,
    1434,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 9,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "// main.js\nvar aisle = require(\"aisle\");\n\naisle.on(\"some global event\",console.log); // { data: [ 'here', true ] }\n\nrequire(\"./other\");",
  "id": 491991,
  "order": 3,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 3,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "const axios = require('axios');\nconst AxiosAdapterLogger = require('axios-adapter-logger');\nconst axiosInstance = axios.create();\nAxiosAdapterLogger(axiosInstance, [\n    require('../plug/console')()\n]);\n\naxiosInstance.get('https://postman-echo.com/get?foo1=bar1&foo2=bar2')",
  "id": 565931,
  "order": 0,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 7,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "const croxy = require(\"croxydb\")\nconst db = new croxy({\n    \"dbName\": \"test\", // Our DB file name.\n    \"dbFolder\": \"database\", // Our DB folder name.\n    \"noBlankData\": true,\n    \"readable\": true,\n    \"language\": \"en\" // You can write \"tr\" or \"en\".\n})\n\ndb.set(\"x.y.z\", \"abc\") // abc\n\ndb.get(\"x\") // {y: {z: \"abc\"}}\ndb.all() // {x: {y: {z: \"abc\"}}}\n\ndb.push(\"a\", \"hello\") //  [\"hello\"]\ndb.push(\"a\", \"world\") //  [\"hello\", \"world\"]\ndb.unpush(\"a\", \"hello\") // [\"world\"]\n\ndb.push(\"b\", {test: \"croxydb\"}) // [{test: \"croxydb\"}]\ndb.push(\"b\", {test2: \"croxydb2\"}) // [{test: \"croxydb\"}, {test2: \"croxydb2\"}]\ndb.delByPriority(\"b\", 1) // [{test2: \"croxydb\"}]\ndb.setByPriority(\"b\", {newtest:\"hey this is edited\"} 1) // [{newtest:\"hey this is edited\"}]\n\ndb.delete(\"x\") // true\ndb.deleteAll() // true",
  "id": 745495,
  "order": 0,
  "stars": 0,
  "errors": [
    1005
  ],
  "hasCode": true,
  "nondeletedLines": 20,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "registerTrackingListener({ id: 'my-custom-id', eventListener: newCallbackFunction })",
  "id": 1981719,
  "order": 15,
  "stars": 0,
  "errors": [
    2304,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 1,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "callback(\"problem occured with file\",null);",
  "id": 2127952,
  "order": 2,
  "stars": 0,
  "errors": [
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 1,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "var changesStream = log.createReadStream({live:true})\n\nchangesStream.on('data', function(node) {\n  console.log('change:', node)\n})",
  "id": 1149453,
  "order": 5,
  "stars": 0,
  "errors": [
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 4,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "'use strict';\n\nconst NspCheck = require('toolbag-plugin-nsp-check');\nconst Path = require('path');\n\nmodule.exports = function config (defaults, callback) {\n  callback(null, {\n    plugins: [\n      {\n        plugin: NspCheck,\n        options: {\n          checkOnRegister: true,\n          packagePath: Path.join(process.cwd(), 'package.json')\n        }\n      }\n    ]\n  });\n};",
  "id": 1973385,
  "order": 0,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 16,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "<div className={{ btn: true, large: props.large }} />",
  "id": 147610,
  "order": 2,
  "stars": 0,
  "errors": [
    17004,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 1,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "etvas.events.off([\n  'product.canceled',\n  'product.suspended',\n  'product.purchased'\n])",
  "id": 128618,
  "order": 29,
  "stars": 0,
  "errors": [
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 5,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "graph.get(\"zuck?fields=picture\", function(err, res) {\n  console.log(res); // { picture: 'http://profile.ak.fbcdn.net/'... }\n});",
  "id": 913679,
  "order": 7,
  "stars": 0,
  "errors": [
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 3,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "USAGE\n  $ sfdx repositories\n\nOPTIONS\n  -x, --extended                                                                    show extra columns\n\n  --columns=columns                                                                 only show provided columns\n                                                                                    (comma-separated)\n\n  --csv                                                                             output is csv format [alias:\n                                                                                    --output=csv]\n\n  --filter=filter                                                                   filter property by partial string\n                                                                                    matching, ex: name=foo\n\n  --json                                                                            format output as json\n\n  --loglevel=(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)  [default: warn] logging level for\n                                                                                    this command invocation\n\n  --no-header                                                                       hide table header from output\n\n  --no-truncate                                                                     do not truncate output to fit screen\n\n  --output=csv|json|yaml                                                            output in a more machine friendly\n                                                                                    format\n\n  --sort=sort                                                                       property to sort by (prepend '-' for\n                                                                                    descending)\n\nDESCRIPTION\n  For more information on the list of repositories, visit https://github.com/salesforcecli/status.\n\nEXAMPLES\n  sfdx repositories --columns=url --filter='Name=sfdx-core' --no-header | xargs open\n  sfdx repositories --json | jq -r '.result[] | select(.name==\"sfdx-core\") | .packages[] | .url",
  "id": 354125,
  "order": 6,
  "stars": 0,
  "errors": [
    2304,
    1434,
    2592,
    1434,
    2304,
    2304,
    2304,
    2695,
    2304,
    2304,
    1005,
    2304,
    1434,
    2304,
    2304,
    2304,
    1005,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    2304,
    2304,
    2304,
    2304,
    1005,
    2304,
    2304,
    1228,
    1434,
    2304,
    2304,
    2304,
    1005,
    2304,
    1005,
    1434,
    2304,
    1128,
    2304,
    1005,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    2693,
    2304,
    2695,
    2304,
    1005,
    2304,
    2304,
    2304,
    1005,
    2304,
    2304,
    2304,
    8016,
    2304,
    1005,
    2304,
    2304,
    2304,
    2304,
    2304,
    2304,
    2304,
    2304,
    2304,
    2304,
    2304,
    2304,
    1109,
    1128,
    1434,
    2304,
    1128,
    1434,
    2304,
    1434,
    2304,
    1005,
    1005,
    2304,
    1005,
    2304,
    1005,
    2304,
    2304,
    1005,
    2304,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    2304,
    2304,
    2304,
    1005,
    1434,
    2304,
    1005,
    2304,
    1005,
    2304,
    1434,
    2304,
    1434,
    2304,
    2304,
    2304,
    1005,
    2304,
    2304,
    2304,
    1005,
    2304,
    2304,
    1005,
    2304,
    1434,
    2304,
    2304,
    2304,
    2304,
    1005,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    2304,
    2304,
    1005,
    1005,
    1005,
    2304,
    1005,
    2304,
    1435,
    2304,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    2304,
    2695,
    2304,
    1005,
    2304,
    1434,
    2304,
    2304,
    1005,
    2304,
    2304,
    1005,
    2304,
    2356,
    1005,
    2304,
    2304,
    2304,
    1005,
    2304,
    1434,
    2304,
    2304,
    1005,
    2304,
    2304,
    2304,
    1005,
    1002
  ],
  "hasCode": true,
  "nondeletedLines": 24,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "authors\n  id,\n  name,\n\narticles\n  id,\n  title,\n  authorId,",
  "id": 1022087,
  "order": 4,
  "stars": 0,
  "errors": [
    2304,
    2304,
    2695,
    2695,
    2304,
    2304,
    2304,
    2695,
    2695,
    2695,
    2304,
    2304,
    1109
  ],
  "hasCode": true,
  "nondeletedLines": 7,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "const stringtoms = require('stringtoms');",
  "id": 1904128,
  "order": 1,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 1,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "only browser environment which support canvas(仅适用于支持html5 canvas的浏览器环境)",
  "id": 1950735,
  "order": 0,
  "stars": 0,
  "errors": [
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    2304,
    2304,
    1005,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 1,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "var connect = require('connect');\nmodule.exports = connect();",
  "id": 1033997,
  "order": 4,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 2,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "cnpj.isValid(number, strict);",
  "id": 143810,
  "order": 2,
  "stars": 0,
  "errors": [
    2304,
    2693,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 1,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "function create_gap_rows(ws, nrows) {\n  var ref = XLSX.utils.decode_range(ws[\"!ref\"]);       // get original range\n  ref.e.r += nrows;                                    // add to ending row\n  ws[\"!ref\"] = XLSX.utils.encode_range(ref);           // reassign row\n}\n\n/* first table */\nvar ws = XLSX.utils.table_to_sheet(document.getElementById('table1'));\ncreate_gap_rows(ws, 1); // one row gap after first table\n\n/* second table */\nXLSX.utils.sheet_add_dom(ws, document.getElementById('table2'), {origin: -1});\ncreate_gap_rows(ws, 3); // three rows gap after second table\n\n/* third table */\nXLSX.utils.sheet_add_dom(ws, document.getElementById('table3'), {origin: -1});",
  "id": 2132720,
  "order": 49,
  "stars": 0,
  "errors": [
    2304,
    2304,
    2304,
    2584,
    2304,
    2584,
    2304,
    2584
  ],
  "hasCode": true,
  "nondeletedLines": 13,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "// Using same event handler as in the example above\nlocator.off('statusChanged', handler);",
  "id": 276394,
  "order": 6,
  "stars": 0,
  "errors": [
    2304,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 1,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "import RNSecureKeystore from 'react-native-secure-keystore';\n\n// TODO: What to do with the module?\nRNSecureKeystore;",
  "id": 454153,
  "order": 0,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 2,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "const runtime = require('cldr-plurals-runtime');",
  "id": 676862,
  "order": 0,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 1,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "yo react-web-app:react-component",
  "id": 991228,
  "order": 2,
  "stars": 0,
  "errors": [
    1434,
    2304,
    2304,
    2304,
    2304,
    1005,
    2304,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 1,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "var roommirrors = RoomMirror.byAnnotation('.rm-a');",
  "id": 1775424,
  "order": 1,
  "stars": 0,
  "errors": [
    2552
  ],
  "hasCode": true,
  "nondeletedLines": 1,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "// Initialize SDK\nParse.initialize(\"YOUR_APP_ID\", \"unused\");\nParse.serverURL = 'http://localhost:1337/parse';\n\n// Save object\nconst obj = new Parse.Object('GameScore');\nobj.set('score',1337);\nawait obj.save();\n\n// Query object\nconst query = new Parse.Query('GameScore');\nconst objAgain = await query.get(obj.id);",
  "id": 1521209,
  "order": 0,
  "stars": 0,
  "errors": [
    2339,
    2339,
    1375,
    1378,
    2339,
    1375,
    1378
  ],
  "hasCode": true,
  "nondeletedLines": 7,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "import Vue from 'vue';\nimport { Button } from 'vant';\nimport 'vant/lib/index.css';\n\nVue.use(Button);",
  "id": 2036098,
  "order": 0,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 4,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "Advanced Options:\n\n  --insert-globals, --ig, --fast    [default: false]\n\n    Skip detection and always insert definitions for process, global,\n    __filename, and __dirname.\n\n    benefit: faster builds\n    cost: extra bytes\n\n  --insert-global-vars, --igv\n\n    Comma-separated list of global variables to detect and define.\n    Default: __filename,__dirname,process,Buffer,global\n\n  --detect-globals, --dg            [default: true]\n\n    Detect the presence of process, global, __filename, and __dirname and define\n    these values when present.\n\n    benefit: npm modules more likely to work\n    cost: slower builds\n\n  --ignore-missing, --im            [default: false]\n\n    Ignore `require()` statements that don't resolve to anything.\n\n  --noparse=FILE\n\n    Don't parse FILE at all. This will make bundling much, much faster for giant\n    libs like jquery or threejs.\n\n  --no-builtins\n\n    Turn off builtins. This is handy when you want to run a bundle in node which\n    provides the core builtins.\n\n  --no-commondir\n\n    Turn off setting a commondir. This is useful if you want to preserve the\n    original paths that a bundle was generated with.\n\n  --no-bundle-external\n\n    Turn off bundling of all external modules. This is useful if you only want\n    to bundle your local files.\n\n  --bare\n\n    Alias for both --no-builtins, --no-commondir, and sets --insert-global-vars\n    to just \"__filename,__dirname\". This is handy if you want to run bundles in\n    node.\n\n  --no-browser-field, --no-bf\n\n    Turn off package.json browser field resolution. This is also handy if you\n    need to run a bundle in node.\n\n  --transform-key\n\n    Instead of the default package.json#browserify#transform field to list\n    all transforms to apply when running browserify, a custom field, like, e.g.\n    package.json#browserify#production or package.json#browserify#staging\n    can be used, by for example running:\n    * `browserify index.js --transform-key=production > bundle.js`\n    * `browserify index.js --transform-key=staging > bundle.js`\n\n  --node\n\n    Alias for --bare and --no-browser-field.\n\n  --full-paths\n\n    Turn off converting module ids into numerical indexes. This is useful for\n    preserving the original paths that a bundle was generated with.\n\n  --deps\n\n    Instead of standard bundle output, print the dependency array generated by\n    module-deps.\n\n  --no-dedupe\n\n    Turn off deduping.\n\n  --list\n\n    Print each file in the dependency graph. Useful for makefiles.\n\n  --extension=EXTENSION\n\n    Consider files with specified EXTENSION as modules, this option can used\n    multiple times.\n\n  --global-transform=MODULE, -g MODULE\n\n    Use a transform module on all files after any ordinary transforms have run.\n\n  --ignore-transform=MODULE, -it MODULE\n\n    Do not run certain transformations, even if specified elsewhere.\n\n  --plugin=MODULE, -p MODULE\n\n    Register MODULE as a plugin.\n\nPassing arguments to transforms and plugins:\n\n  For -t, -g, and -p, you may use subarg syntax to pass options to the\n  transforms or plugin function as the second parameter. For example:\n\n    -t [ foo -x 3 --beep ]\n\n  will call the `foo` transform for each applicable file by calling:\n\n    foo(file, { x: 3, beep: true })\n",
  "id": 237707,
  "order": 3,
  "stars": 0,
  "errors": [
    1434,
    2304,
    2304,
    2552,
    2304,
    2304,
    1109,
    1128,
    1005,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    1005,
    2695,
    2695,
    2695,
    2304,
    1005,
    2339,
    1005,
    1434,
    2304,
    2304,
    1434,
    2304,
    2304,
    2304,
    2363,
    2304,
    2304,
    2304,
    2304,
    1005,
    2304,
    1434,
    2304,
    2669,
    2670,
    8006,
    1005,
    2304,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    2304,
    1005,
    2695,
    2695,
    2695,
    2695,
    2304,
    2304,
    2304,
    1109,
    1128,
    1005,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    2695,
    2695,
    2695,
    2304,
    1005,
    1434,
    2304,
    2304,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    2304,
    1005,
    1434,
    2304,
    1435,
    2304,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    2304,
    1434,
    2304,
    2304,
    2304,
    2304,
    2304,
    1109,
    1128,
    1005,
    2304,
    1443,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    1002,
    2304,
    1005,
    2304,
    1434,
    2304,
    1002,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    2304,
    1003,
    2304,
    2304,
    1434,
    2304,
    1434,
    2304,
    2304,
    1005,
    2304,
    1435,
    2304,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    2304,
    2304,
    1005,
    2304,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    2304,
    1003,
    2304,
    2304,
    1434,
    2304,
    1434,
    2304,
    1435,
    2304,
    1434,
    2304,
    2304,
    1005,
    2304,
    1434,
    2304,
    1005,
    2304,
    1005,
    2304,
    1434,
    2304,
    1434,
    2304,
    2304,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    1005,
    1003,
    2304,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    2304,
    1005,
    2304,
    1434,
    2304,
    1005,
    2304,
    1005,
    2304,
    2304,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    2304,
    1003,
    2304,
    1434,
    2304,
    1005,
    2304,
    1005,
    2304,
    2695,
    2304,
    2304,
    2304,
    2304,
    1005,
    2304,
    1005,
    2304,
    2363,
    2304,
    1434,
    2304,
    1434,
    2304,
    2339,
    1005,
    2304,
    1435,
    2304,
    1005,
    2304,
    1005,
    2304,
    1434,
    2304,
    1434,
    2304,
    2304,
    2304,
    1003,
    2304,
    2304,
    2304,
    2304,
    2304,
    1434,
    2304,
    1434,
    2304,
    2304,
    1005,
    2304,
    1435,
    2304,
    2304,
    1005,
    2304,
    1434,
    2304,
    1435,
    2304,
    1005,
    2304,
    1005,
    2304,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    2304,
    2304,
    1003,
    2304,
    2304,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    1005,
    2304,
    1005,
    1005,
    1005,
    2304,
    1434,
    2304,
    2304,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    2304,
    2695,
    2304,
    1005,
    2304,
    2304,
    2695,
    2695,
    2304,
    2304,
    1005,
    1005,
    1005,
    2304,
    2304,
    1005,
    1005,
    1434,
    2304,
    1434,
    2304,
    2304,
    2695,
    2304,
    1005,
    1005,
    2304,
    1005,
    2304,
    1005,
    1109,
    2363,
    2363,
    2304,
    1434,
    2304,
    1005,
    2304,
    1005,
    2304,
    1005,
    2304,
    2304,
    2304,
    1003,
    2304,
    2304,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    8006,
    1005,
    2304,
    1434,
    2304,
    2304,
    1005,
    2304,
    1434,
    2304,
    1005,
    2304,
    1005,
    2304,
    1005,
    2304,
    1005,
    2304,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    1005,
    1003,
    2304,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    2304,
    2695,
    2304,
    1005,
    2304,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    2304,
    2362,
    2304,
    1003,
    2304,
    2304,
    1434,
    2304,
    1434,
    2304,
    2304,
    1003,
    2304,
    1434,
    2304,
    1434,
    2304,
    2304,
    2304,
    1005,
    2304,
    2304,
    1005,
    1005,
    2304,
    1003,
    2304,
    1005,
    2304,
    1005,
    2304,
    1434,
    2304,
    1005,
    2304,
    1005,
    8016,
    1005,
    2304,
    1434,
    2304,
    2304,
    1434,
    2304,
    2304,
    1003,
    2356,
    2304,
    1005,
    2304,
    2695,
    2304,
    1005,
    2304,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    8006,
    1005,
    2304,
    1434,
    2304,
    1434,
    2304,
    1434,
    2693,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    2304,
    1003,
    2304,
    2304,
    1005,
    2304,
    2695,
    2593,
    1005,
    2304,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    2304,
    2695,
    2304,
    1005,
    1005,
    2304,
    1005,
    2304,
    1003,
    2304,
    1005,
    2304,
    2695,
    2304,
    1005,
    2304,
    1434,
    2304,
    2304,
    2304,
    8016,
    1005,
    2304,
    1003,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    2304,
    2695,
    2695,
    2695,
    2304,
    2304,
    2304,
    2304,
    2304,
    1005,
    2304,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    2304,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    1005,
    2304,
    1434,
    2304,
    2304,
    1005,
    2304,
    2304,
    2304,
    1005,
    2357,
    1005,
    2304,
    1128,
    1434,
    2304,
    1434,
    2304,
    2304,
    1443,
    1434,
    2304,
    1005,
    2304,
    1005,
    2304,
    1005,
    2304,
    1005,
    2304,
    2304,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 69,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "const capture = require('windows.media.capture')\n\n// We also require this module in order to be able to access\n// device controller properties\nconst devices = require('windows.media.devices')\n\nconst capture = new capture.MediaCapture()\n\ncapture.initializeAsync((error, result) => {\n  if (error) {\n    return console.error(error);\n  }\n\n  // Get the device controller, its type (VideoDeviceController) is defined in\n  // the windows.media.devices namespace. That's why we had to load\n  // windows.media.devices before calling this method.\n  const deviceController = capture.videoDeviceController\n\n  // We can now use the VideoDeviceController regularly\n  deviceController.brightness.trySetValue(-1)\n})",
  "id": 280616,
  "order": 7,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 10,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": ".ngToggleText{\n    font-style: oblique;\n    color: red;\n    cursor:pointer;\n}",
  "id": 1420566,
  "order": 1,
  "stars": 0,
  "errors": [
    1128,
    1434,
    2304,
    2304,
    2304,
    1005,
    2304,
    2304,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 5,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "Usage: node index.js [options]\n\nOptions:\n  -v, --version                output the version number\n  -i, --input <file>           input CSV file\n  -d, --delimiter <delimiter>  delimiter used in the CSV (default: \",\")\n  -c, --columns <columns>      columns to extract, comma-separated\n                               you can get unique values per unique values from another column by\n                               chaining them together using `::`\n                               (default: all columns)\n  -o, --output <directory>     output destination, will create a file per column\n  --no-sort                    don't sort unique values\n  -h, --help                   display help for command",
  "id": 101839,
  "order": 0,
  "stars": 0,
  "errors": [
    1434,
    2304,
    2304,
    2304,
    2695,
    2304,
    2304,
    1005,
    2304,
    1434,
    2304,
    1434,
    2304,
    2693,
    2695,
    2304,
    2304,
    2304,
    2304,
    1005,
    2304,
    2304,
    2695,
    2304,
    2304,
    2304,
    2304,
    1005,
    2304,
    2304,
    1005,
    2304,
    1135,
    1135,
    2304,
    2304,
    2304,
    2304,
    1005,
    2304,
    2304,
    2695,
    2304,
    2304,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    2304,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    2304,
    1135,
    1135,
    2304,
    1005,
    2304,
    2304,
    2304,
    2304,
    2304,
    1005,
    2304,
    2695,
    2304,
    1005,
    2304,
    1434,
    2304,
    1434,
    2304,
    1434,
    2304,
    2304,
    2304,
    2304,
    1005,
    1434,
    2304,
    2362,
    2695,
    1002,
    2304,
    2304,
    1005,
    2304,
    1434,
    2304,
    1005,
    2304,
    1005
  ],
  "hasCode": true,
  "nondeletedLines": 12,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "var region = new window.VTTRegion(0, 1, \"I'm a region.\");\ncue.region = region;",
  "id": 219067,
  "order": 12,
  "stars": 0,
  "errors": [
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 2,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "    const MindStack = require('mindstack');\n\n    let botInstance = new MindStack();",
  "id": 1343217,
  "order": 0,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 2,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "var errorist = require('errorist');\n\nfunction asyncFunc(callback) {\n  process.nextTick(function() {\n    callback('this is not an Error; it is a string');\n  });\n}\n\nasyncFunc(function(err) {\n  if (err) {\n    // you would never do a thing like throw a string, right?\n    throw errorist(err);\n  }\n});\n\n// or with promises\nrequire('bluebird').promisify(asyncFunc)()\n  .catch(err) {\n    // stack trace FTW\n    throw errorist(err);\n  });",
  "id": 875702,
  "order": 0,
  "stars": 0,
  "errors": [
    2304,
    1005,
    2304,
    1128
  ],
  "hasCode": true,
  "nondeletedLines": 15,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "import FetchClient from 'http-fetch-client';\n\nlet fetch = new FetchClient();\nfetch.use(({ response }) => {\n  if (response.ok) {\n    //  response.status in 200 - 300\n  } else {\n    //\n  }\n})",
  "id": 1101262,
  "order": 2,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 7,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "<DatePicker\n  selected={date}\n  onSelect={handleDateSelect} //when day is clicked\n  onChange={handleDateChange} //only when value has changed\n/>",
  "id": 1636961,
  "order": 2,
  "stars": 0,
  "errors": [
    17004,
    2304,
    2552,
    2304,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 5,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "const dokuLib = require('jokul-nodejs-library');\n\nlet setupConfiguration = dokuLib.SetupConfiguration;\n    setupConfiguration.environment = 'sandbox'\n    setupConfiguration.client_id = 'CLIENTID';\n    setupConfiguration.merchant_name = 'MERCHANT_NAME';\n    setupConfiguration.shared_key = 'SHARED_KEY';\n    setupConfiguration.serverLocation = dokuLib.getServerLocation(setupConfiguration.environment);\n",
  "id": 788571,
  "order": 0,
  "stars": 0,
  "errors": [],
  "hasCode": true,
  "nondeletedLines": 7,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
},
{
  "code": "grunt.initConfig({\n  less: {\n    web: {\n      files: {\n        \"dist/web.css\": \"css/web.less\"\n      }\n    }\n  },\n\n  gaze: {\n    less: {\n      files: [\"css/*.less\"],\n      tasks: [\"less\"]\n    },\n    livereload: {\n      files: [\"dist/*\"],\n      options: {\n        livereload: true\n      }\n    }\n  }\n});\n\ngrunt.registerTask(\"default\", [\"less\", \"gaze\"]);",
  "id": 1034914,
  "order": 0,
  "stars": 0,
  "errors": [
    2304,
    2304
  ],
  "hasCode": true,
  "nondeletedLines": 22,
  "fixed": false,
  "tsFixed": false,
  "compileFail": false,
  "lineFail": false
}]